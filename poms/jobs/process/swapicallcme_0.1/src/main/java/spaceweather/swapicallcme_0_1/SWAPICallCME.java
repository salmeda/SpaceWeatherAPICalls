// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package spaceweather.swapicallcme_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

//the import part of tJavaRow_1
//import java.util.List;

//the import part of tJavaFlex_1
//import java.util.List;

//the import part of tJavaFlex_2
//import java.util.List;

//the import part of tJavaFlex_3
//import java.util.List;

//the import part of tJavaRow_2
//import java.util.List;

@SuppressWarnings("unused")

/**
 * Job: SWAPICallCME Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20191031_1204-M3
 * @status DEV
 */
public class SWAPICallCME implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (nasa_api_key != null) {

				this.setProperty("nasa_api_key", nasa_api_key.toString());

			}

			if (outputfile != null) {

				this.setProperty("outputfile", outputfile.toString());

			}

		}

		public String nasa_api_key;

		public String getNasa_api_key() {
			return this.nasa_api_key;
		}

		public String outputfile;

		public String getOutputfile() {
			return this.outputfile;
		}
	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "SWAPICallCME";
	private final String projectName = "SPACEWEATHER";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					SWAPICallCME.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(SWAPICallCME.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSetGlobalVar_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBSP_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRESTClient_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaFlex_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputRaw_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			if (this.execStat) {
				runStat.updateStatOnConnection("OnComponentError1", 0, "error");
			}

			errorCode = null;
			tJavaFlex_3Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaFlex_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJavaFlex_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBSP_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJavaFlex_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJavaFlex_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaFlex_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJavaFlex_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBSP_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJavaFlex_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJavaFlex_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBSP_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJavaFlex_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJavaFlex_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_SPACEWEATHER_SWAPICallCME = new byte[0];
		static byte[] commonByteArray_SPACEWEATHER_SWAPICallCME = new byte[0];

		public Integer errorCode;

		public Integer getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		public String CallID;

		public String getCallID() {
			return this.CallID;
		}

		public String Update;

		public String getUpdate() {
			return this.Update;
		}

		public String ErrorStatus;

		public String getErrorStatus() {
			return this.ErrorStatus;
		}

		public String NULL;

		public String getNULL() {
			return this.NULL;
		}

		public java.util.Date NULLDate;

		public java.util.Date getNULLDate() {
			return this.NULLDate;
		}

		public String ErrorCodeSPOUT;

		public String getErrorCodeSPOUT() {
			return this.ErrorCodeSPOUT;
		}

		public String ErrorMsgSPOUT;

		public String getErrorMsgSPOUT() {
			return this.ErrorMsgSPOUT;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SPACEWEATHER_SWAPICallCME.length) {
					if (length < 1024 && commonByteArray_SPACEWEATHER_SWAPICallCME.length == 0) {
						commonByteArray_SPACEWEATHER_SWAPICallCME = new byte[1024];
					} else {
						commonByteArray_SPACEWEATHER_SWAPICallCME = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SPACEWEATHER_SWAPICallCME, 0, length);
				strReturn = new String(commonByteArray_SPACEWEATHER_SWAPICallCME, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SPACEWEATHER_SWAPICallCME) {

				try {

					int length = 0;

					this.errorCode = readInteger(dis);

					this.errorMessage = readString(dis);

					this.CallID = readString(dis);

					this.Update = readString(dis);

					this.ErrorStatus = readString(dis);

					this.NULL = readString(dis);

					this.NULLDate = readDate(dis);

					this.ErrorCodeSPOUT = readString(dis);

					this.ErrorMsgSPOUT = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

				// String

				writeString(this.CallID, dos);

				// String

				writeString(this.Update, dos);

				// String

				writeString(this.ErrorStatus, dos);

				// String

				writeString(this.NULL, dos);

				// java.util.Date

				writeDate(this.NULLDate, dos);

				// String

				writeString(this.ErrorCodeSPOUT, dos);

				// String

				writeString(this.ErrorMsgSPOUT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + String.valueOf(errorCode));
			sb.append(",errorMessage=" + errorMessage);
			sb.append(",CallID=" + CallID);
			sb.append(",Update=" + Update);
			sb.append(",ErrorStatus=" + ErrorStatus);
			sb.append(",NULL=" + NULL);
			sb.append(",NULLDate=" + String.valueOf(NULLDate));
			sb.append(",ErrorCodeSPOUT=" + ErrorCodeSPOUT);
			sb.append(",ErrorMsgSPOUT=" + ErrorMsgSPOUT);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_SPACEWEATHER_SWAPICallCME = new byte[0];
		static byte[] commonByteArray_SPACEWEATHER_SWAPICallCME = new byte[0];

		public Integer errorCode;

		public Integer getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		public String CallID;

		public String getCallID() {
			return this.CallID;
		}

		public String Update;

		public String getUpdate() {
			return this.Update;
		}

		public String ErrorStatus;

		public String getErrorStatus() {
			return this.ErrorStatus;
		}

		public String NULL;

		public String getNULL() {
			return this.NULL;
		}

		public java.util.Date NULLDate;

		public java.util.Date getNULLDate() {
			return this.NULLDate;
		}

		public String ErrorCodeSPOUT;

		public String getErrorCodeSPOUT() {
			return this.ErrorCodeSPOUT;
		}

		public String ErrorMsgSPOUT;

		public String getErrorMsgSPOUT() {
			return this.ErrorMsgSPOUT;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SPACEWEATHER_SWAPICallCME.length) {
					if (length < 1024 && commonByteArray_SPACEWEATHER_SWAPICallCME.length == 0) {
						commonByteArray_SPACEWEATHER_SWAPICallCME = new byte[1024];
					} else {
						commonByteArray_SPACEWEATHER_SWAPICallCME = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SPACEWEATHER_SWAPICallCME, 0, length);
				strReturn = new String(commonByteArray_SPACEWEATHER_SWAPICallCME, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SPACEWEATHER_SWAPICallCME) {

				try {

					int length = 0;

					this.errorCode = readInteger(dis);

					this.errorMessage = readString(dis);

					this.CallID = readString(dis);

					this.Update = readString(dis);

					this.ErrorStatus = readString(dis);

					this.NULL = readString(dis);

					this.NULLDate = readDate(dis);

					this.ErrorCodeSPOUT = readString(dis);

					this.ErrorMsgSPOUT = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

				// String

				writeString(this.CallID, dos);

				// String

				writeString(this.Update, dos);

				// String

				writeString(this.ErrorStatus, dos);

				// String

				writeString(this.NULL, dos);

				// java.util.Date

				writeDate(this.NULLDate, dos);

				// String

				writeString(this.ErrorCodeSPOUT, dos);

				// String

				writeString(this.ErrorMsgSPOUT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + String.valueOf(errorCode));
			sb.append(",errorMessage=" + errorMessage);
			sb.append(",CallID=" + CallID);
			sb.append(",Update=" + Update);
			sb.append(",ErrorStatus=" + ErrorStatus);
			sb.append(",NULL=" + NULL);
			sb.append(",NULLDate=" + String.valueOf(NULLDate));
			sb.append(",ErrorCodeSPOUT=" + ErrorCodeSPOUT);
			sb.append(",ErrorMsgSPOUT=" + ErrorMsgSPOUT);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_SPACEWEATHER_SWAPICallCME = new byte[0];
		static byte[] commonByteArray_SPACEWEATHER_SWAPICallCME = new byte[0];

		public Object content;

		public Object getContent() {
			return this.content;
		}

		public String filename;

		public String getFilename() {
			return this.filename;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SPACEWEATHER_SWAPICallCME.length) {
					if (length < 1024 && commonByteArray_SPACEWEATHER_SWAPICallCME.length == 0) {
						commonByteArray_SPACEWEATHER_SWAPICallCME = new byte[1024];
					} else {
						commonByteArray_SPACEWEATHER_SWAPICallCME = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SPACEWEATHER_SWAPICallCME, 0, length);
				strReturn = new String(commonByteArray_SPACEWEATHER_SWAPICallCME, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SPACEWEATHER_SWAPICallCME) {

				try {

					int length = 0;

					this.content = (Object) dis.readObject();

					this.filename = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.content);

				// String

				writeString(this.filename, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("content=" + String.valueOf(content));
			sb.append(",filename=" + filename);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class outputStruct implements routines.system.IPersistableRow<outputStruct> {
		final static byte[] commonByteArrayLock_SPACEWEATHER_SWAPICallCME = new byte[0];
		static byte[] commonByteArray_SPACEWEATHER_SWAPICallCME = new byte[0];

		public Object content;

		public Object getContent() {
			return this.content;
		}

		public String filename;

		public String getFilename() {
			return this.filename;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SPACEWEATHER_SWAPICallCME.length) {
					if (length < 1024 && commonByteArray_SPACEWEATHER_SWAPICallCME.length == 0) {
						commonByteArray_SPACEWEATHER_SWAPICallCME = new byte[1024];
					} else {
						commonByteArray_SPACEWEATHER_SWAPICallCME = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SPACEWEATHER_SWAPICallCME, 0, length);
				strReturn = new String(commonByteArray_SPACEWEATHER_SWAPICallCME, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SPACEWEATHER_SWAPICallCME) {

				try {

					int length = 0;

					this.content = (Object) dis.readObject();

					this.filename = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Object

				dos.writeObject(this.content);

				// String

				writeString(this.filename, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("content=" + String.valueOf(content));
			sb.append(",filename=" + filename);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(outputStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_SPACEWEATHER_SWAPICallCME = new byte[0];
		static byte[] commonByteArray_SPACEWEATHER_SWAPICallCME = new byte[0];

		public Integer statusCode;

		public Integer getStatusCode() {
			return this.statusCode;
		}

		public routines.system.Document body;

		public routines.system.Document getBody() {
			return this.body;
		}

		public String string;

		public String getString() {
			return this.string;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SPACEWEATHER_SWAPICallCME.length) {
					if (length < 1024 && commonByteArray_SPACEWEATHER_SWAPICallCME.length == 0) {
						commonByteArray_SPACEWEATHER_SWAPICallCME = new byte[1024];
					} else {
						commonByteArray_SPACEWEATHER_SWAPICallCME = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SPACEWEATHER_SWAPICallCME, 0, length);
				strReturn = new String(commonByteArray_SPACEWEATHER_SWAPICallCME, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SPACEWEATHER_SWAPICallCME) {

				try {

					int length = 0;

					this.statusCode = readInteger(dis);

					this.body = (routines.system.Document) dis.readObject();

					this.string = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.statusCode, dos);

				// Document

				dos.writeObject(this.body);

				// String

				writeString(this.string, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("statusCode=" + String.valueOf(statusCode));
			sb.append(",body=" + String.valueOf(body));
			sb.append(",string=" + string);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_SPACEWEATHER_SWAPICallCME = new byte[0];
		static byte[] commonByteArray_SPACEWEATHER_SWAPICallCME = new byte[0];

		public Integer errorCode;

		public Integer getErrorCode() {
			return this.errorCode;
		}

		public String errorMessage;

		public String getErrorMessage() {
			return this.errorMessage;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SPACEWEATHER_SWAPICallCME.length) {
					if (length < 1024 && commonByteArray_SPACEWEATHER_SWAPICallCME.length == 0) {
						commonByteArray_SPACEWEATHER_SWAPICallCME = new byte[1024];
					} else {
						commonByteArray_SPACEWEATHER_SWAPICallCME = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SPACEWEATHER_SWAPICallCME, 0, length);
				strReturn = new String(commonByteArray_SPACEWEATHER_SWAPICallCME, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SPACEWEATHER_SWAPICallCME) {

				try {

					int length = 0;

					this.errorCode = readInteger(dis);

					this.errorMessage = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.errorCode, dos);

				// String

				writeString(this.errorMessage, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("errorCode=" + String.valueOf(errorCode));
			sb.append(",errorMessage=" + errorMessage);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_SPACEWEATHER_SWAPICallCME = new byte[0];
		static byte[] commonByteArray_SPACEWEATHER_SWAPICallCME = new byte[0];

		public String StartDate;

		public String getStartDate() {
			return this.StartDate;
		}

		public String EndDate;

		public String getEndDate() {
			return this.EndDate;
		}

		public String APIName;

		public String getAPIName() {
			return this.APIName;
		}

		public String CallID;

		public String getCallID() {
			return this.CallID;
		}

		public String Insert;

		public String getInsert() {
			return this.Insert;
		}

		public String Update;

		public String getUpdate() {
			return this.Update;
		}

		public String ErrorStatus;

		public String getErrorStatus() {
			return this.ErrorStatus;
		}

		public String FinishedStatus;

		public String getFinishedStatus() {
			return this.FinishedStatus;
		}

		public String ErrorMsgIN;

		public String getErrorMsgIN() {
			return this.ErrorMsgIN;
		}

		public String ErrorCodeSPOUT;

		public String getErrorCodeSPOUT() {
			return this.ErrorCodeSPOUT;
		}

		public String ErrorMsgSPOut;

		public String getErrorMsgSPOut() {
			return this.ErrorMsgSPOut;
		}

		public String NULL;

		public String getNULL() {
			return this.NULL;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SPACEWEATHER_SWAPICallCME.length) {
					if (length < 1024 && commonByteArray_SPACEWEATHER_SWAPICallCME.length == 0) {
						commonByteArray_SPACEWEATHER_SWAPICallCME = new byte[1024];
					} else {
						commonByteArray_SPACEWEATHER_SWAPICallCME = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SPACEWEATHER_SWAPICallCME, 0, length);
				strReturn = new String(commonByteArray_SPACEWEATHER_SWAPICallCME, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SPACEWEATHER_SWAPICallCME) {

				try {

					int length = 0;

					this.StartDate = readString(dis);

					this.EndDate = readString(dis);

					this.APIName = readString(dis);

					this.CallID = readString(dis);

					this.Insert = readString(dis);

					this.Update = readString(dis);

					this.ErrorStatus = readString(dis);

					this.FinishedStatus = readString(dis);

					this.ErrorMsgIN = readString(dis);

					this.ErrorCodeSPOUT = readString(dis);

					this.ErrorMsgSPOut = readString(dis);

					this.NULL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.StartDate, dos);

				// String

				writeString(this.EndDate, dos);

				// String

				writeString(this.APIName, dos);

				// String

				writeString(this.CallID, dos);

				// String

				writeString(this.Insert, dos);

				// String

				writeString(this.Update, dos);

				// String

				writeString(this.ErrorStatus, dos);

				// String

				writeString(this.FinishedStatus, dos);

				// String

				writeString(this.ErrorMsgIN, dos);

				// String

				writeString(this.ErrorCodeSPOUT, dos);

				// String

				writeString(this.ErrorMsgSPOut, dos);

				// String

				writeString(this.NULL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("StartDate=" + StartDate);
			sb.append(",EndDate=" + EndDate);
			sb.append(",APIName=" + APIName);
			sb.append(",CallID=" + CallID);
			sb.append(",Insert=" + Insert);
			sb.append(",Update=" + Update);
			sb.append(",ErrorStatus=" + ErrorStatus);
			sb.append(",FinishedStatus=" + FinishedStatus);
			sb.append(",ErrorMsgIN=" + ErrorMsgIN);
			sb.append(",ErrorCodeSPOUT=" + ErrorCodeSPOUT);
			sb.append(",ErrorMsgSPOut=" + ErrorMsgSPOut);
			sb.append(",NULL=" + NULL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_SPACEWEATHER_SWAPICallCME = new byte[0];
		static byte[] commonByteArray_SPACEWEATHER_SWAPICallCME = new byte[0];

		public String StartDate;

		public String getStartDate() {
			return this.StartDate;
		}

		public String EndDate;

		public String getEndDate() {
			return this.EndDate;
		}

		public String APIName;

		public String getAPIName() {
			return this.APIName;
		}

		public String CallID;

		public String getCallID() {
			return this.CallID;
		}

		public String Insert;

		public String getInsert() {
			return this.Insert;
		}

		public String Update;

		public String getUpdate() {
			return this.Update;
		}

		public String ErrorStatus;

		public String getErrorStatus() {
			return this.ErrorStatus;
		}

		public String FinishedStatus;

		public String getFinishedStatus() {
			return this.FinishedStatus;
		}

		public String ErrorMsgIN;

		public String getErrorMsgIN() {
			return this.ErrorMsgIN;
		}

		public String ErrorCodeSPOUT;

		public String getErrorCodeSPOUT() {
			return this.ErrorCodeSPOUT;
		}

		public String ErrorMsgSPOut;

		public String getErrorMsgSPOut() {
			return this.ErrorMsgSPOut;
		}

		public String NULL;

		public String getNULL() {
			return this.NULL;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SPACEWEATHER_SWAPICallCME.length) {
					if (length < 1024 && commonByteArray_SPACEWEATHER_SWAPICallCME.length == 0) {
						commonByteArray_SPACEWEATHER_SWAPICallCME = new byte[1024];
					} else {
						commonByteArray_SPACEWEATHER_SWAPICallCME = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SPACEWEATHER_SWAPICallCME, 0, length);
				strReturn = new String(commonByteArray_SPACEWEATHER_SWAPICallCME, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SPACEWEATHER_SWAPICallCME) {

				try {

					int length = 0;

					this.StartDate = readString(dis);

					this.EndDate = readString(dis);

					this.APIName = readString(dis);

					this.CallID = readString(dis);

					this.Insert = readString(dis);

					this.Update = readString(dis);

					this.ErrorStatus = readString(dis);

					this.FinishedStatus = readString(dis);

					this.ErrorMsgIN = readString(dis);

					this.ErrorCodeSPOUT = readString(dis);

					this.ErrorMsgSPOut = readString(dis);

					this.NULL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.StartDate, dos);

				// String

				writeString(this.EndDate, dos);

				// String

				writeString(this.APIName, dos);

				// String

				writeString(this.CallID, dos);

				// String

				writeString(this.Insert, dos);

				// String

				writeString(this.Update, dos);

				// String

				writeString(this.ErrorStatus, dos);

				// String

				writeString(this.FinishedStatus, dos);

				// String

				writeString(this.ErrorMsgIN, dos);

				// String

				writeString(this.ErrorCodeSPOUT, dos);

				// String

				writeString(this.ErrorMsgSPOut, dos);

				// String

				writeString(this.NULL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("StartDate=" + StartDate);
			sb.append(",EndDate=" + EndDate);
			sb.append(",APIName=" + APIName);
			sb.append(",CallID=" + CallID);
			sb.append(",Insert=" + Insert);
			sb.append(",Update=" + Update);
			sb.append(",ErrorStatus=" + ErrorStatus);
			sb.append(",FinishedStatus=" + FinishedStatus);
			sb.append(",ErrorMsgIN=" + ErrorMsgIN);
			sb.append(",ErrorCodeSPOUT=" + ErrorCodeSPOUT);
			sb.append(",ErrorMsgSPOut=" + ErrorMsgSPOut);
			sb.append(",NULL=" + NULL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_SPACEWEATHER_SWAPICallCME = new byte[0];
		static byte[] commonByteArray_SPACEWEATHER_SWAPICallCME = new byte[0];

		public String StartDate;

		public String getStartDate() {
			return this.StartDate;
		}

		public String EndDate;

		public String getEndDate() {
			return this.EndDate;
		}

		public String APIName;

		public String getAPIName() {
			return this.APIName;
		}

		public String CallID;

		public String getCallID() {
			return this.CallID;
		}

		public String Insert;

		public String getInsert() {
			return this.Insert;
		}

		public String Update;

		public String getUpdate() {
			return this.Update;
		}

		public String ErrorStatus;

		public String getErrorStatus() {
			return this.ErrorStatus;
		}

		public String FinishedStatus;

		public String getFinishedStatus() {
			return this.FinishedStatus;
		}

		public String ErrorMsgIN;

		public String getErrorMsgIN() {
			return this.ErrorMsgIN;
		}

		public String ErrorCodeSPOUT;

		public String getErrorCodeSPOUT() {
			return this.ErrorCodeSPOUT;
		}

		public String ErrorMsgSPOut;

		public String getErrorMsgSPOut() {
			return this.ErrorMsgSPOut;
		}

		public String NULL;

		public String getNULL() {
			return this.NULL;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SPACEWEATHER_SWAPICallCME.length) {
					if (length < 1024 && commonByteArray_SPACEWEATHER_SWAPICallCME.length == 0) {
						commonByteArray_SPACEWEATHER_SWAPICallCME = new byte[1024];
					} else {
						commonByteArray_SPACEWEATHER_SWAPICallCME = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SPACEWEATHER_SWAPICallCME, 0, length);
				strReturn = new String(commonByteArray_SPACEWEATHER_SWAPICallCME, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SPACEWEATHER_SWAPICallCME) {

				try {

					int length = 0;

					this.StartDate = readString(dis);

					this.EndDate = readString(dis);

					this.APIName = readString(dis);

					this.CallID = readString(dis);

					this.Insert = readString(dis);

					this.Update = readString(dis);

					this.ErrorStatus = readString(dis);

					this.FinishedStatus = readString(dis);

					this.ErrorMsgIN = readString(dis);

					this.ErrorCodeSPOUT = readString(dis);

					this.ErrorMsgSPOut = readString(dis);

					this.NULL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.StartDate, dos);

				// String

				writeString(this.EndDate, dos);

				// String

				writeString(this.APIName, dos);

				// String

				writeString(this.CallID, dos);

				// String

				writeString(this.Insert, dos);

				// String

				writeString(this.Update, dos);

				// String

				writeString(this.ErrorStatus, dos);

				// String

				writeString(this.FinishedStatus, dos);

				// String

				writeString(this.ErrorMsgIN, dos);

				// String

				writeString(this.ErrorCodeSPOUT, dos);

				// String

				writeString(this.ErrorMsgSPOut, dos);

				// String

				writeString(this.NULL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("StartDate=" + StartDate);
			sb.append(",EndDate=" + EndDate);
			sb.append(",APIName=" + APIName);
			sb.append(",CallID=" + CallID);
			sb.append(",Insert=" + Insert);
			sb.append(",Update=" + Update);
			sb.append(",ErrorStatus=" + ErrorStatus);
			sb.append(",FinishedStatus=" + FinishedStatus);
			sb.append(",ErrorMsgIN=" + ErrorMsgIN);
			sb.append(",ErrorCodeSPOUT=" + ErrorCodeSPOUT);
			sb.append(",ErrorMsgSPOut=" + ErrorMsgSPOut);
			sb.append(",NULL=" + NULL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class SetVarsStruct implements routines.system.IPersistableRow<SetVarsStruct> {
		final static byte[] commonByteArrayLock_SPACEWEATHER_SWAPICallCME = new byte[0];
		static byte[] commonByteArray_SPACEWEATHER_SWAPICallCME = new byte[0];

		public String StartDate;

		public String getStartDate() {
			return this.StartDate;
		}

		public String EndDate;

		public String getEndDate() {
			return this.EndDate;
		}

		public String APIName;

		public String getAPIName() {
			return this.APIName;
		}

		public String CallID;

		public String getCallID() {
			return this.CallID;
		}

		public String Insert;

		public String getInsert() {
			return this.Insert;
		}

		public String Update;

		public String getUpdate() {
			return this.Update;
		}

		public String ErrorStatus;

		public String getErrorStatus() {
			return this.ErrorStatus;
		}

		public String FinishedStatus;

		public String getFinishedStatus() {
			return this.FinishedStatus;
		}

		public String ErrorMsgIN;

		public String getErrorMsgIN() {
			return this.ErrorMsgIN;
		}

		public String ErrorCodeSPOUT;

		public String getErrorCodeSPOUT() {
			return this.ErrorCodeSPOUT;
		}

		public String ErrorMsgSPOut;

		public String getErrorMsgSPOut() {
			return this.ErrorMsgSPOut;
		}

		public String NULL;

		public String getNULL() {
			return this.NULL;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SPACEWEATHER_SWAPICallCME.length) {
					if (length < 1024 && commonByteArray_SPACEWEATHER_SWAPICallCME.length == 0) {
						commonByteArray_SPACEWEATHER_SWAPICallCME = new byte[1024];
					} else {
						commonByteArray_SPACEWEATHER_SWAPICallCME = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SPACEWEATHER_SWAPICallCME, 0, length);
				strReturn = new String(commonByteArray_SPACEWEATHER_SWAPICallCME, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SPACEWEATHER_SWAPICallCME) {

				try {

					int length = 0;

					this.StartDate = readString(dis);

					this.EndDate = readString(dis);

					this.APIName = readString(dis);

					this.CallID = readString(dis);

					this.Insert = readString(dis);

					this.Update = readString(dis);

					this.ErrorStatus = readString(dis);

					this.FinishedStatus = readString(dis);

					this.ErrorMsgIN = readString(dis);

					this.ErrorCodeSPOUT = readString(dis);

					this.ErrorMsgSPOut = readString(dis);

					this.NULL = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.StartDate, dos);

				// String

				writeString(this.EndDate, dos);

				// String

				writeString(this.APIName, dos);

				// String

				writeString(this.CallID, dos);

				// String

				writeString(this.Insert, dos);

				// String

				writeString(this.Update, dos);

				// String

				writeString(this.ErrorStatus, dos);

				// String

				writeString(this.FinishedStatus, dos);

				// String

				writeString(this.ErrorMsgIN, dos);

				// String

				writeString(this.ErrorCodeSPOUT, dos);

				// String

				writeString(this.ErrorMsgSPOut, dos);

				// String

				writeString(this.NULL, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("StartDate=" + StartDate);
			sb.append(",EndDate=" + EndDate);
			sb.append(",APIName=" + APIName);
			sb.append(",CallID=" + CallID);
			sb.append(",Insert=" + Insert);
			sb.append(",Update=" + Update);
			sb.append(",ErrorStatus=" + ErrorStatus);
			sb.append(",FinishedStatus=" + FinishedStatus);
			sb.append(",ErrorMsgIN=" + ErrorMsgIN);
			sb.append(",ErrorCodeSPOUT=" + ErrorCodeSPOUT);
			sb.append(",ErrorMsgSPOut=" + ErrorMsgSPOut);
			sb.append(",NULL=" + NULL);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(SetVarsStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_SPACEWEATHER_SWAPICallCME = new byte[0];
		static byte[] commonByteArray_SPACEWEATHER_SWAPICallCME = new byte[0];

		public String StartDate;

		public String getStartDate() {
			return this.StartDate;
		}

		public String EndDate;

		public String getEndDate() {
			return this.EndDate;
		}

		public String APIName;

		public String getAPIName() {
			return this.APIName;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SPACEWEATHER_SWAPICallCME.length) {
					if (length < 1024 && commonByteArray_SPACEWEATHER_SWAPICallCME.length == 0) {
						commonByteArray_SPACEWEATHER_SWAPICallCME = new byte[1024];
					} else {
						commonByteArray_SPACEWEATHER_SWAPICallCME = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SPACEWEATHER_SWAPICallCME, 0, length);
				strReturn = new String(commonByteArray_SPACEWEATHER_SWAPICallCME, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SPACEWEATHER_SWAPICallCME) {

				try {

					int length = 0;

					this.StartDate = readString(dis);

					this.EndDate = readString(dis);

					this.APIName = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.StartDate, dos);

				// String

				writeString(this.EndDate, dos);

				// String

				writeString(this.APIName, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("StartDate=" + StartDate);
			sb.append(",EndDate=" + EndDate);
			sb.append(",APIName=" + APIName);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				SetVarsStruct SetVars = new SetVarsStruct();
				SetVarsStruct row2 = SetVars;
				row3Struct row3 = new row3Struct();
				row4Struct row4 = new row4Struct();
				row5Struct row5 = new row5Struct();
				outputStruct output = new outputStruct();
				row6Struct row6 = new row6Struct();
				row7Struct row7 = new row7Struct();
				row8Struct row8 = new row8Struct();
				row13Struct row13 = new row13Struct();

				/**
				 * [tFlowToIterate_1 begin ] start
				 */

				int NB_ITERATE_tJavaFlex_1 = 0; // for statistics

				ok_Hash.put("tFlowToIterate_1", false);
				start_Hash.put("tFlowToIterate_1", System.currentTimeMillis());

				currentComponent = "tFlowToIterate_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "output");
				}

				int tos_count_tFlowToIterate_1 = 0;

				int nb_line_tFlowToIterate_1 = 0;
				int counter_tFlowToIterate_1 = 0;

				/**
				 * [tFlowToIterate_1 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				outputStruct output_tmp = new outputStruct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tLogRow_3 begin ] start
				 */

				ok_Hash.put("tLogRow_3", false);
				start_Hash.put("tLogRow_3", System.currentTimeMillis());

				currentComponent = "tLogRow_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row13");
				}

				int tos_count_tLogRow_3 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_3 = "|";
				java.io.PrintStream consoleOut_tLogRow_3 = null;

				StringBuilder strBuffer_tLogRow_3 = null;
				int nb_line_tLogRow_3 = 0;
///////////////////////    			

				/**
				 * [tLogRow_3 begin ] stop
				 */

				/**
				 * [tDBSP_2 begin ] start
				 */

				ok_Hash.put("tDBSP_2", false);
				start_Hash.put("tDBSP_2", System.currentTimeMillis());

				currentComponent = "tDBSP_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row8");
				}

				int tos_count_tDBSP_2 = 0;

				java.sql.Connection connection_tDBSP_2 = null;
				String dbProperties_tDBSP_2 = "noDatetimeStringSync=true";
				String connectionString_tDBSP_2 = null;
				if (dbProperties_tDBSP_2 == null || dbProperties_tDBSP_2.trim().length() == 0) {
					connectionString_tDBSP_2 = "jdbc:mysql://" + "localhost" + ":" + "" + "/" + "NASANW";
				} else {
					connectionString_tDBSP_2 = "jdbc:mysql://" + "localhost" + ":" + "" + "/" + "NASANW" + "?"
							+ dbProperties_tDBSP_2;
				}
				String dbUser_tDBSP_2 = "bdsql";

				final String decryptedPassword_tDBSP_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("ENC:[jFy/5zcgFJpJm6VAk5BT88GGWcUREtHWuJVYBMofQbAh8aQ=]");

				String dbPwd_tDBSP_2 = decryptedPassword_tDBSP_2;

				java.lang.Class.forName("com.mysql.cj.jdbc.Driver");
				connection_tDBSP_2 = java.sql.DriverManager.getConnection(connectionString_tDBSP_2, dbUser_tDBSP_2,
						dbPwd_tDBSP_2);

				java.sql.CallableStatement statement_tDBSP_2 = connection_tDBSP_2
						.prepareCall("{call " + "myfunction" + "(?,?,?,?,?,?,?,?,?,?,?)}");

				java.sql.Date tmpDate_tDBSP_2;
				String tmpString_tDBSP_2;

				/**
				 * [tDBSP_2 begin ] stop
				 */

				/**
				 * [tJavaRow_2 begin ] start
				 */

				ok_Hash.put("tJavaRow_2", false);
				start_Hash.put("tJavaRow_2", System.currentTimeMillis());

				currentComponent = "tJavaRow_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row7");
				}

				int tos_count_tJavaRow_2 = 0;

				int nb_line_tJavaRow_2 = 0;

				/**
				 * [tJavaRow_2 begin ] stop
				 */

				/**
				 * [tRESTClient_2 begin ] start
				 */

				ok_Hash.put("tRESTClient_2", false);
				start_Hash.put("tRESTClient_2", System.currentTimeMillis());

				currentComponent = "tRESTClient_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tRESTClient_2 = 0;

				/**
				 * [tRESTClient_2 begin ] stop
				 */

				/**
				 * [tJavaRow_1 begin ] start
				 */

				ok_Hash.put("tJavaRow_1", false);
				start_Hash.put("tJavaRow_1", System.currentTimeMillis());

				currentComponent = "tJavaRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tJavaRow_1 = 0;

				int nb_line_tJavaRow_1 = 0;

				/**
				 * [tJavaRow_1 begin ] stop
				 */

				/**
				 * [tDBSP_1 begin ] start
				 */

				ok_Hash.put("tDBSP_1", false);
				start_Hash.put("tDBSP_1", System.currentTimeMillis());

				currentComponent = "tDBSP_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tDBSP_1 = 0;

				java.sql.Connection connection_tDBSP_1 = null;
				String dbProperties_tDBSP_1 = "noDatetimeStringSync=true";
				String connectionString_tDBSP_1 = null;
				if (dbProperties_tDBSP_1 == null || dbProperties_tDBSP_1.trim().length() == 0) {
					connectionString_tDBSP_1 = "jdbc:mysql://" + "localhost" + ":" + "" + "/" + "NASANW";
				} else {
					connectionString_tDBSP_1 = "jdbc:mysql://" + "localhost" + ":" + "" + "/" + "NASANW" + "?"
							+ dbProperties_tDBSP_1;
				}
				String dbUser_tDBSP_1 = "bdsql";

				final String decryptedPassword_tDBSP_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("ENC:[5z090AIhkKAtSupakxWZjAtWqaOnvo3xh2e3z2Uoz27kGFg=]");

				String dbPwd_tDBSP_1 = decryptedPassword_tDBSP_1;

				java.lang.Class.forName("com.mysql.cj.jdbc.Driver");
				connection_tDBSP_1 = java.sql.DriverManager.getConnection(connectionString_tDBSP_1, dbUser_tDBSP_1,
						dbPwd_tDBSP_1);

				java.sql.CallableStatement statement_tDBSP_1 = connection_tDBSP_1
						.prepareCall("{call " + "nasaAPIcallsHandler" + "(?,?,?,?,?,?,?,?,?,?)}");

				java.sql.Date tmpDate_tDBSP_1;
				String tmpString_tDBSP_1;

				/**
				 * [tDBSP_1 begin ] stop
				 */

				/**
				 * [tSetGlobalVar_1 begin ] start
				 */

				ok_Hash.put("tSetGlobalVar_1", false);
				start_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());

				currentComponent = "tSetGlobalVar_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "SetVars");
				}

				int tos_count_tSetGlobalVar_1 = 0;

				/**
				 * [tSetGlobalVar_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				SetVarsStruct SetVars_tmp = new SetVarsStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				java.util.Calendar calendar_tDBInput_1 = java.util.Calendar.getInstance();
				calendar_tDBInput_1.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tDBInput_1 = calendar_tDBInput_1.getTime();
				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "com.mysql.cj.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "bdsql";

				final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("ENC:[zzbuoP7sVTaCQsa86cNQQs400sjTZGKRpWt/vTl+6XgAnQg=]");

				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;

				String url_tDBInput_1 = "jdbc:mysql://" + "localhost" + ":" + "" + "/" + "NASANW" + "?"
						+ "noDatetimeStringSync=true";

				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1, dbUser_tDBInput_1,
						dbPwd_tDBInput_1);

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "select DATE_FORMAT(DATE_ADD(ifnull(max( EndDate),'1999-12-31'), INTERVAL 1 DAY),'%Y-%m-%d') as StartDate,\nDATE_FORMAT(D"
						+ "ATE_SUB(CURDATE(),INTERVAL 1 DAY),'%Y-%m-%d') EndDate,\n \"CME\" APIName\nfrom NASANW.nasaAPIcalls \nwhere apiname='CME'\nan"
						+ "d status='Finished'";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.StartDate = null;
						} else {

							row1.StartDate = routines.system.JDBCUtil.getString(rs_tDBInput_1, 1, false);
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row1.EndDate = null;
						} else {

							row1.EndDate = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2, false);
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row1.APIName = null;
						} else {

							row1.APIName = routines.system.JDBCUtil.getString(rs_tDBInput_1, 3, false);
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							SetVars = null;

// # Output table : 'SetVars'
							SetVars_tmp.StartDate = row1.StartDate;
							SetVars_tmp.EndDate = row1.EndDate;
							SetVars_tmp.APIName = row1.APIName;
							SetVars_tmp.CallID = null;
							SetVars_tmp.Insert = "1";
							SetVars_tmp.Update = "2";
							SetVars_tmp.ErrorStatus = "Error";
							SetVars_tmp.FinishedStatus = "Finished";
							SetVars_tmp.ErrorMsgIN = null;
							SetVars_tmp.ErrorCodeSPOUT = null;
							SetVars_tmp.ErrorMsgSPOut = null;
							SetVars_tmp.NULL = null;
							SetVars = SetVars_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */

						/**
						 * [tMap_1 process_data_begin ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_begin ] stop
						 */
// Start of branch "SetVars"
						if (SetVars != null) {

							/**
							 * [tSetGlobalVar_1 main ] start
							 */

							currentComponent = "tSetGlobalVar_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "SetVars");
							}

							globalMap.put("StartDate", "");
							globalMap.put("EndDate", "");
							globalMap.put("CallID", "");
							globalMap.put("ApiName", "");
							globalMap.put("Insert", "1");
							globalMap.put("Update", "2");
							globalMap.put("ErrorStatus", "Error");
							globalMap.put("FinishedStatus", "Finished");
							globalMap.put("ErrorMsgIN", "");
							globalMap.put("ErrorCodeSPOUT", "");
							globalMap.put("ErrorMsgSPOut", "");
							globalMap.put("NULL", "");
							globalMap.put("outfilename", "");

							row2 = SetVars;

							tos_count_tSetGlobalVar_1++;

							/**
							 * [tSetGlobalVar_1 main ] stop
							 */

							/**
							 * [tSetGlobalVar_1 process_data_begin ] start
							 */

							currentComponent = "tSetGlobalVar_1";

							/**
							 * [tSetGlobalVar_1 process_data_begin ] stop
							 */

							/**
							 * [tDBSP_1 main ] start
							 */

							currentComponent = "tDBSP_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row2");
							}

							if (row2.Insert == null) {
								statement_tDBSP_1.setNull(1, java.sql.Types.VARCHAR);
							} else {

								statement_tDBSP_1.setString(1, row2.Insert);

							}

							if (row2.CallID == null) {
								statement_tDBSP_1.setNull(2, java.sql.Types.VARCHAR);
							} else {

								statement_tDBSP_1.setString(2, row2.CallID);

							}

							statement_tDBSP_1.registerOutParameter(2, java.sql.Types.VARCHAR);

							statement_tDBSP_1.setString(3, row2.APIName);

							statement_tDBSP_1.setString(4, row2.StartDate);

							statement_tDBSP_1.setString(5, row2.EndDate);

							if (row2.NULL == null) {
								statement_tDBSP_1.setNull(6, java.sql.Types.VARCHAR);
							} else {

								statement_tDBSP_1.setString(6, row2.NULL);

							}

							if (row2.NULL == null) {
								statement_tDBSP_1.setNull(7, java.sql.Types.VARCHAR);
							} else {

								statement_tDBSP_1.setString(7, row2.NULL);

							}

							if (row2.NULL == null) {
								statement_tDBSP_1.setNull(8, java.sql.Types.VARCHAR);
							} else {

								statement_tDBSP_1.setString(8, row2.NULL);

							}

							statement_tDBSP_1.registerOutParameter(9, java.sql.Types.VARCHAR);

							statement_tDBSP_1.registerOutParameter(10, java.sql.Types.VARCHAR);

							statement_tDBSP_1.execute();

							row3.StartDate = row2.StartDate;

							row3.EndDate = row2.EndDate;

							row3.APIName = row2.APIName;

							row3.CallID = statement_tDBSP_1.getString(2);

							if (statement_tDBSP_1.wasNull()) {
								row3.CallID = null;
							}

							row3.Insert = row2.Insert;

							row3.Update = row2.Update;

							row3.ErrorStatus = row2.ErrorStatus;

							row3.FinishedStatus = row2.FinishedStatus;

							row3.ErrorMsgIN = row2.ErrorMsgIN;

							row3.ErrorCodeSPOUT = row2.ErrorCodeSPOUT;

							row3.ErrorMsgSPOut = row2.ErrorMsgSPOut;

							row3.NULL = row2.NULL;

							tos_count_tDBSP_1++;

							/**
							 * [tDBSP_1 main ] stop
							 */

							/**
							 * [tDBSP_1 process_data_begin ] start
							 */

							currentComponent = "tDBSP_1";

							/**
							 * [tDBSP_1 process_data_begin ] stop
							 */

							/**
							 * [tJavaRow_1 main ] start
							 */

							currentComponent = "tJavaRow_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row3");
							}

							// Code generated according to input schema and output schema
							row4.StartDate = row3.StartDate;
							row4.EndDate = row3.EndDate;
							row4.APIName = row3.APIName;
							row4.CallID = row3.CallID;
							row4.Insert = row3.Insert;
							row4.Update = row3.Update;
							row4.ErrorStatus = row3.ErrorStatus;
							row4.FinishedStatus = row3.FinishedStatus;
							row4.ErrorMsgIN = row3.ErrorMsgIN;
							row4.ErrorCodeSPOUT = row3.ErrorCodeSPOUT;
							row4.ErrorMsgSPOut = row3.ErrorMsgSPOut;

							globalMap.put("CallID", row3.CallID);
							globalMap.put("APIName", row3.APIName);
							globalMap.put("StartDate", row3.StartDate);
							globalMap.put("EndDate", row3.EndDate);
							globalMap.put("Insert", row3.Insert);
							globalMap.put("Update", row3.Update);
							globalMap.put("ErrorStatus", row3.ErrorStatus);
							globalMap.put("FinishedStatus", row3.FinishedStatus);
							globalMap.put("outfilename",
									"/home/bigdata/SWOut/Json/" + row3.APIName + row3.CallID + ".txt");
							context.outputfile = "/home/bigdata/SWOut/Json/" + row3.APIName + row3.CallID + ".txt";

							System.out.println("CallID: " + globalMap.get("CallID"));
							System.out.println("APIName: " + globalMap.get("APIName"));
							System.out.println("StartDate: " + globalMap.get("StartDate"));
							System.out.println("EndDate: " + globalMap.get("EndDate"));
							System.out.println("Insert: " + globalMap.get("Insert"));
							System.out.println("Update: " + globalMap.get("Update"));
							System.out.println("FinishedStatus: " + globalMap.get("FinishedStatus"));

							nb_line_tJavaRow_1++;

							tos_count_tJavaRow_1++;

							/**
							 * [tJavaRow_1 main ] stop
							 */

							/**
							 * [tJavaRow_1 process_data_begin ] start
							 */

							currentComponent = "tJavaRow_1";

							/**
							 * [tJavaRow_1 process_data_begin ] stop
							 */

							/**
							 * [tRESTClient_2 main ] start
							 */

							currentComponent = "tRESTClient_2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row4");
							}

							row7 = null;
							row5 = null;

// expected response body
							Object responseDoc_tRESTClient_2 = null;

							try {
								// request body
								org.dom4j.Document requestDoc_tRESTClient_2 = null;
								String requestString_tRESTClient_2 = null;

								Object requestBody_tRESTClient_2 = requestDoc_tRESTClient_2 != null
										? requestDoc_tRESTClient_2
										: requestString_tRESTClient_2;

								// resposne class name
								Class<?> responseClass_tRESTClient_2 = String.class;

								// create web client instance
								org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean factoryBean_tRESTClient_2 = new org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean();

								boolean inOSGi = routines.system.BundleUtils.inOSGi();

								final java.util.List<org.apache.cxf.feature.Feature> features_tRESTClient_2 = new java.util.ArrayList<org.apache.cxf.feature.Feature>();

								String url = "https://kauai.ccmc.gsfc.nasa.gov/DONKI/WS/get/CME?";
								// {baseUri}tRESTClient
								factoryBean_tRESTClient_2
										.setServiceName(new javax.xml.namespace.QName(url, "tRESTClient"));
								factoryBean_tRESTClient_2.setAddress(url);

								factoryBean_tRESTClient_2.setFeatures(features_tRESTClient_2);

								java.util.List<Object> providers_tRESTClient_2 = new java.util.ArrayList<Object>();
								providers_tRESTClient_2.add(new org.apache.cxf.jaxrs.provider.dom4j.DOM4JProvider() {
									// workaround for https://jira.talendforge.org/browse/TESB-7276
									public org.dom4j.Document readFrom(Class<org.dom4j.Document> cls,
											java.lang.reflect.Type type, java.lang.annotation.Annotation[] anns,
											javax.ws.rs.core.MediaType mt,
											javax.ws.rs.core.MultivaluedMap<String, String> headers,
											java.io.InputStream is)
											throws IOException, javax.ws.rs.WebApplicationException {
										String contentLength = headers.getFirst("Content-Length");
										if (!org.apache.cxf.common.util.StringUtils.isEmpty(contentLength)
												&& Integer.valueOf(contentLength) <= 0) {
											try {
												return org.dom4j.DocumentHelper.parseText("<root/>");
											} catch (org.dom4j.DocumentException e_tRESTClient_2) {
												e_tRESTClient_2.printStackTrace();
											}
											return null;
										}
										return super.readFrom(cls, type, anns, mt, headers, is);
									}
								});
								org.apache.cxf.jaxrs.provider.json.JSONProvider jsonProvider_tRESTClient_2 = new org.apache.cxf.jaxrs.provider.json.JSONProvider();
								jsonProvider_tRESTClient_2.setIgnoreNamespaces(true);
								jsonProvider_tRESTClient_2.setAttributesToElements(true);

								jsonProvider_tRESTClient_2.setSupportUnwrapped(true);
								jsonProvider_tRESTClient_2.setWrapperName("root");

								jsonProvider_tRESTClient_2.setDropRootElement(false);
								jsonProvider_tRESTClient_2.setConvertTypesToStrings(false);
								providers_tRESTClient_2.add(jsonProvider_tRESTClient_2);
								factoryBean_tRESTClient_2.setProviders(providers_tRESTClient_2);
								factoryBean_tRESTClient_2.setTransportId("http://cxf.apache.org/transports/http");

								boolean use_auth_tRESTClient_2 = false;
								if (use_auth_tRESTClient_2 && "SAML".equals("BASIC")) {
									if (!inOSGi) {
										throw new IllegalArgumentException(
												"SAML based security scenarios are not supported in Studio (standalone)");
									}
									// set SAML Token authentication

									final String decryptedPassword_tRESTClient_2 = routines.system.PasswordEncryptUtil
											.decryptPassword("ENC:[fQK9xdepwR0/vXwKj2zHo0rwaSZnb+nD8x9V+S6usgcjhFQ6]");

									org.apache.cxf.ws.security.trust.STSClient stsClient = org.talend.esb.security.saml.STSClientUtils
											.createSTSClient(factoryBean_tRESTClient_2.getBus(), "username",
													decryptedPassword_tRESTClient_2);

									org.talend.esb.security.saml.SAMLRESTUtils
											.configureClient(factoryBean_tRESTClient_2, stsClient);
								}

								org.apache.cxf.jaxrs.client.WebClient webClient_tRESTClient_2 = factoryBean_tRESTClient_2
										.createWebClient();

								// set request path
								webClient_tRESTClient_2.path("");

								// set connection properties
								org.apache.cxf.jaxrs.client.ClientConfiguration clientConfig_tRESTClient_2 = org.apache.cxf.jaxrs.client.WebClient
										.getConfig(webClient_tRESTClient_2);
								org.apache.cxf.transport.http.HTTPConduit conduit_tRESTClient_2 = clientConfig_tRESTClient_2
										.getHttpConduit();

								if (clientConfig_tRESTClient_2.getEndpoint() != null
										&& clientConfig_tRESTClient_2.getEndpoint().getEndpointInfo() != null) {
									clientConfig_tRESTClient_2.getEndpoint().getEndpointInfo()
											.setProperty("enable.webclient.operation.reporting", true);
								}

								if (use_auth_tRESTClient_2 && "BASIC".equals("BASIC")) {
									// set BASIC auth

									final String decryptedPassword_tRESTClient_2 = routines.system.PasswordEncryptUtil
											.decryptPassword("ENC:[2zvibgQgB9cs5qEwNzj/xJZN3DRkBaENWRcMf1zahbeH1FeA]");

									org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_2 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
									authPolicy_tRESTClient_2.setAuthorizationType("Basic");
									authPolicy_tRESTClient_2.setUserName("username");
									authPolicy_tRESTClient_2.setPassword(decryptedPassword_tRESTClient_2);
									conduit_tRESTClient_2.setAuthorization(authPolicy_tRESTClient_2);
								} else if (use_auth_tRESTClient_2 && "HTTP Digest".equals("BASIC")) {
									// set Digest auth

									final String decryptedPassword_tRESTClient_2 = routines.system.PasswordEncryptUtil
											.decryptPassword("ENC:[ZDpl2cDfpxNUcFDavXbCqJIcUxVZZVC6wOni+SlwJ0G9wB/f]");

									org.apache.cxf.configuration.security.AuthorizationPolicy authPolicy_tRESTClient_2 = new org.apache.cxf.configuration.security.AuthorizationPolicy();
									authPolicy_tRESTClient_2.setAuthorizationType("Digest");
									authPolicy_tRESTClient_2.setUserName("username");
									authPolicy_tRESTClient_2.setPassword(decryptedPassword_tRESTClient_2);
									conduit_tRESTClient_2.setAuthorization(authPolicy_tRESTClient_2);
								}

								if (!inOSGi) {
									conduit_tRESTClient_2.getClient().setReceiveTimeout((long) (60 * 1000L));
									conduit_tRESTClient_2.getClient().setConnectionTimeout((long) (30 * 1000L));
									boolean use_proxy_tRESTClient_2 = false;
									if (use_proxy_tRESTClient_2) {

										final String decryptedPassword_tRESTClient_2 = routines.system.PasswordEncryptUtil
												.decryptPassword("ENC:[BokTac2bcW5mlnmAODglve5J8pX0G8ZuybRsoQ==]");

										conduit_tRESTClient_2.getClient().setProxyServer("61.163.92.4");
										conduit_tRESTClient_2.getClient().setProxyServerPort(Integer.valueOf(8080));
										conduit_tRESTClient_2.getProxyAuthorization().setUserName("");
										conduit_tRESTClient_2.getProxyAuthorization()
												.setPassword(decryptedPassword_tRESTClient_2);
									}
								}

								// set Accept-Type
								webClient_tRESTClient_2.accept("*/*");

								// set optional query and header properties if any

								if (use_auth_tRESTClient_2 && "OAUTH2_BEARER".equals("BASIC")) {
									// set oAuth2 bearer token
									webClient_tRESTClient_2.header("Authorization", "Bearer " + "");
								}

								if (use_auth_tRESTClient_2 && "OIDC_PASSWORD_GRANT".equals("BASIC")) {

									final String decryptedPassword_tRESTClient_2 = routines.system.PasswordEncryptUtil
											.decryptPassword("ENC:[YBfSV+bqwRI5CL9O4Sg24E7h3qK/uioeDysh1tEKT8Kxco2A]");

									String username_tRESTClient_2 = "username";
									String password_tRESTClient_2 = decryptedPassword_tRESTClient_2;

									String bearerHeader_tRESTClient_2 = null;

									try {
										if (!inOSGi) {
											org.springframework.context.support.ClassPathXmlApplicationContext context_tRESTClient_2 = new org.springframework.context.support.ClassPathXmlApplicationContext(
													"META-INF/tesb/oidc-context.xml");
											org.talend.esb.security.oidc.OidcConfiguration oidcConfiguration_tRESTClient_2 = context_tRESTClient_2
													.getBean(org.talend.esb.security.oidc.OidcConfiguration.class);
											bearerHeader_tRESTClient_2 = org.talend.esb.security.oidc.OidcClientUtils
													.oidcClientBearer(username_tRESTClient_2, password_tRESTClient_2,
															oidcConfiguration_tRESTClient_2);
										} else {
											bearerHeader_tRESTClient_2 = org.talend.esb.security.oidc.OidcClientUtils
													.oidcClientBearer(username_tRESTClient_2, password_tRESTClient_2);
										}
									} catch (Exception ex) {
										throw new javax.ws.rs.WebApplicationException(
												"Failed to get OIDC access token: ", ex);
									}

									webClient_tRESTClient_2.header("Authorization", bearerHeader_tRESTClient_2);
								}

								// if FORM request then capture query parameters into Form, otherwise set them
								// as queries

								webClient_tRESTClient_2.query("api_key", context.nasa_api_key);

								webClient_tRESTClient_2.query("startDate", row4.StartDate);

								webClient_tRESTClient_2.query("endDate", row4.EndDate);

								try {
									// start send request

									responseDoc_tRESTClient_2 = webClient_tRESTClient_2
											.get(responseClass_tRESTClient_2);

									int webClientResponseStatus_tRESTClient_2 = webClient_tRESTClient_2.getResponse()
											.getStatus();
									if (webClientResponseStatus_tRESTClient_2 >= 300) {
										throw new javax.ws.rs.WebApplicationException(
												webClient_tRESTClient_2.getResponse());
									}

									if (row5 == null) {
										row5 = new row5Struct();
									}

									row5.statusCode = webClientResponseStatus_tRESTClient_2;

									{
										Object responseObj_tRESTClient_2 = responseDoc_tRESTClient_2;

										if (responseObj_tRESTClient_2 != null) {
											if (responseClass_tRESTClient_2 == String.class) {
												row5.string = (String) responseObj_tRESTClient_2;
											} else {
												routines.system.Document responseTalendDoc_tRESTClient_2 = null;
												if (null != responseObj_tRESTClient_2) {
													responseTalendDoc_tRESTClient_2 = new routines.system.Document();
													responseTalendDoc_tRESTClient_2.setDocument(
															(org.dom4j.Document) responseObj_tRESTClient_2);
												}
												row5.body = responseTalendDoc_tRESTClient_2;
											}
										}
									}

									globalMap.put("tRESTClient_2_HEADERS",
											webClient_tRESTClient_2.getResponse().getHeaders());

								} catch (javax.ws.rs.WebApplicationException ex_tRESTClient_2) {

									if (row7 == null) {
										row7 = new row7Struct();
									}
									row7.errorCode = ex_tRESTClient_2.getResponse().getStatus();

									String errorMessage_tRESTClient_2 = null;
									try {
										errorMessage_tRESTClient_2 = ex_tRESTClient_2.getResponse()
												.readEntity(String.class);
									} catch (Exception exe_tRESTClient_2) {
										// ignore
									}
									if (null == errorMessage_tRESTClient_2
											|| 0 == errorMessage_tRESTClient_2.trim().length()) {
										errorMessage_tRESTClient_2 = ex_tRESTClient_2.getMessage();
									}
									row7.errorMessage = errorMessage_tRESTClient_2;

									globalMap.put("tRESTClient_2_HEADERS", ex_tRESTClient_2.getResponse().getHeaders());

								}

							} catch (Exception e_tRESTClient_2) {

								throw new TalendException(e_tRESTClient_2, currentComponent, globalMap);

							}

							tos_count_tRESTClient_2++;

							/**
							 * [tRESTClient_2 main ] stop
							 */

							/**
							 * [tRESTClient_2 process_data_begin ] start
							 */

							currentComponent = "tRESTClient_2";

							/**
							 * [tRESTClient_2 process_data_begin ] stop
							 */
// Start of branch "row5"
							if (row5 != null) {

								/**
								 * [tMap_2 main ] start
								 */

								currentComponent = "tMap_2";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row5");
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_2 = false;
								boolean mainRowRejected_tMap_2 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
									// ###############################
									// # Output tables

									output = null;

// # Output table : 'output'
									output_tmp.content = row5.string;
									output_tmp.filename = "/home/bigdata/SWOut/Json/"
											+ (String) globalMap.get("APIName") + (String) globalMap.get("CallID")
											+ ".json";
									output = output_tmp;
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_2 = false;

								tos_count_tMap_2++;

								/**
								 * [tMap_2 main ] stop
								 */

								/**
								 * [tMap_2 process_data_begin ] start
								 */

								currentComponent = "tMap_2";

								/**
								 * [tMap_2 process_data_begin ] stop
								 */
// Start of branch "output"
								if (output != null) {

									/**
									 * [tFlowToIterate_1 main ] start
									 */

									currentComponent = "tFlowToIterate_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "output");
									}

									globalMap.put("output.content", output.content);

									globalMap.put("output.filename", output.filename);

									nb_line_tFlowToIterate_1++;
									counter_tFlowToIterate_1++;
									globalMap.put("tFlowToIterate_1_CURRENT_ITERATION", counter_tFlowToIterate_1);

									tos_count_tFlowToIterate_1++;

									/**
									 * [tFlowToIterate_1 main ] stop
									 */

									/**
									 * [tFlowToIterate_1 process_data_begin ] start
									 */

									currentComponent = "tFlowToIterate_1";

									/**
									 * [tFlowToIterate_1 process_data_begin ] stop
									 */
									NB_ITERATE_tJavaFlex_1++;

									if (execStat) {
										runStat.updateStatOnConnection("OnComponentOk1", 3, 0);
									}

									if (execStat) {
										runStat.updateStatOnConnection("row6", 3, 0);
									}

									if (execStat) {
										runStat.updateStatOnConnection("row12", 3, 0);
									}

									if (execStat) {
										runStat.updateStatOnConnection("OnComponentError1", 3, 0);
									}

									if (execStat) {
										runStat.updateStatOnConnection("row10", 3, 0);
									}

									if (execStat) {
										runStat.updateStatOnConnection("row9", 3, 0);
									}

									if (execStat) {
										runStat.updateStatOnConnection("row11", 3, 0);
									}

									if (execStat) {
										runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tJavaFlex_1);
										// Thread.sleep(1000);
									}

									/**
									 * [tFileOutputRaw_1 begin ] start
									 */

									ok_Hash.put("tFileOutputRaw_1", false);
									start_Hash.put("tFileOutputRaw_1", System.currentTimeMillis());

									currentComponent = "tFileOutputRaw_1";

									if (execStat) {
										runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
									}

									int tos_count_tFileOutputRaw_1 = 0;

									String fileName_tFileOutputRaw_1 = ((String) globalMap.get("output.filename"));

									/**
									 * [tFileOutputRaw_1 begin ] stop
									 */

									/**
									 * [tJavaFlex_1 begin ] start
									 */

									ok_Hash.put("tJavaFlex_1", false);
									start_Hash.put("tJavaFlex_1", System.currentTimeMillis());

									currentComponent = "tJavaFlex_1";

									int tos_count_tJavaFlex_1 = 0;

// start part of your Java code

									/**
									 * [tJavaFlex_1 begin ] stop
									 */

									/**
									 * [tJavaFlex_1 main ] start
									 */

									currentComponent = "tJavaFlex_1";

// here is the main part of the component,
// a piece of code executed in the row
// loop

									row6.content = globalMap.get("output.content");

									System.out.println("outputfilename: " + globalMap.get("output.filename"));

									tos_count_tJavaFlex_1++;

									/**
									 * [tJavaFlex_1 main ] stop
									 */

									/**
									 * [tJavaFlex_1 process_data_begin ] start
									 */

									currentComponent = "tJavaFlex_1";

									/**
									 * [tJavaFlex_1 process_data_begin ] stop
									 */

									/**
									 * [tFileOutputRaw_1 main ] start
									 */

									currentComponent = "tFileOutputRaw_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "row6");
									}

									try {
										Object content_tFileOutputRaw_1 = row6.content;

										if (content_tFileOutputRaw_1 != null) {
											java.io.File file_tFileOutputRaw_1 = new java.io.File(
													fileName_tFileOutputRaw_1);
											java.io.File parentFile_tFileOutputRaw_1 = file_tFileOutputRaw_1
													.getParentFile();
											if (parentFile_tFileOutputRaw_1 != null
													&& !parentFile_tFileOutputRaw_1.exists()) {
												parentFile_tFileOutputRaw_1.mkdirs();
											}
											if (content_tFileOutputRaw_1 instanceof String) {
												org.apache.commons.io.FileUtils.writeStringToFile(file_tFileOutputRaw_1,
														content_tFileOutputRaw_1.toString(), "UTF-8");
											} else if (content_tFileOutputRaw_1 instanceof byte[]) {
												org.apache.commons.io.FileUtils.writeByteArrayToFile(
														file_tFileOutputRaw_1, (byte[]) content_tFileOutputRaw_1);
											} else if (content_tFileOutputRaw_1 instanceof java.io.InputStream) {
												java.io.InputStream fis_tFileOutputRaw_1 = (java.io.InputStream) content_tFileOutputRaw_1;
												java.io.FileOutputStream fos_tFileOutputRaw_1 = new java.io.FileOutputStream(
														file_tFileOutputRaw_1);
												byte[] buffer_tFileOutputRaw_1 = new byte[65536];
												int nb_tFileOutputRaw_1 = 0;
												while (true) {
													nb_tFileOutputRaw_1 = fis_tFileOutputRaw_1
															.read(buffer_tFileOutputRaw_1);
													if (nb_tFileOutputRaw_1 == -1) {
														break;
													}
													fos_tFileOutputRaw_1.write(buffer_tFileOutputRaw_1, 0,
															nb_tFileOutputRaw_1);
												}
												fis_tFileOutputRaw_1.close();
												fos_tFileOutputRaw_1.close();
											} else {
												org.apache.commons.io.FileUtils.writeStringToFile(file_tFileOutputRaw_1,
														content_tFileOutputRaw_1.toString(), "UTF-8");
											}
										}
									} catch (java.lang.Exception e_tFileOutputRaw_1) {
										System.err.println(e_tFileOutputRaw_1);
									}

									tos_count_tFileOutputRaw_1++;

									/**
									 * [tFileOutputRaw_1 main ] stop
									 */

									/**
									 * [tFileOutputRaw_1 process_data_begin ] start
									 */

									currentComponent = "tFileOutputRaw_1";

									/**
									 * [tFileOutputRaw_1 process_data_begin ] stop
									 */

									/**
									 * [tFileOutputRaw_1 process_data_end ] start
									 */

									currentComponent = "tFileOutputRaw_1";

									/**
									 * [tFileOutputRaw_1 process_data_end ] stop
									 */

									/**
									 * [tJavaFlex_1 process_data_end ] start
									 */

									currentComponent = "tJavaFlex_1";

									/**
									 * [tJavaFlex_1 process_data_end ] stop
									 */

									/**
									 * [tJavaFlex_1 end ] start
									 */

									currentComponent = "tJavaFlex_1";

// end of the component, outside/closing the loop

									ok_Hash.put("tJavaFlex_1", true);
									end_Hash.put("tJavaFlex_1", System.currentTimeMillis());

									/**
									 * [tJavaFlex_1 end ] stop
									 */

									/**
									 * [tFileOutputRaw_1 end ] start
									 */

									currentComponent = "tFileOutputRaw_1";

									globalMap.put("tFileOutputRaw_1_FILENAME_PATH", fileName_tFileOutputRaw_1);

									if (execStat) {
										runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
									}

									ok_Hash.put("tFileOutputRaw_1", true);
									end_Hash.put("tFileOutputRaw_1", System.currentTimeMillis());

									if (execStat) {
										runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
									}
									tJavaFlex_2Process(globalMap);

									/**
									 * [tFileOutputRaw_1 end ] stop
									 */

									if (execStat) {
										runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tJavaFlex_1);
									}

									/**
									 * [tFlowToIterate_1 process_data_end ] start
									 */

									currentComponent = "tFlowToIterate_1";

									/**
									 * [tFlowToIterate_1 process_data_end ] stop
									 */

								} // End of branch "output"

								/**
								 * [tMap_2 process_data_end ] start
								 */

								currentComponent = "tMap_2";

								/**
								 * [tMap_2 process_data_end ] stop
								 */

							} // End of branch "row5"

// Start of branch "row7"
							if (row7 != null) {

								/**
								 * [tJavaRow_2 main ] start
								 */

								currentComponent = "tJavaRow_2";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row7");
								}

								// code sample:
//
// multiply by 2 the row identifier
// row8.id = row7.id * 2;
//
// lowercase the name
// row8.name = row7.name.toLowerCase();

								row8.CallID = ((String) globalMap.get("CallID"));
								row8.Update = ((String) globalMap.get("Update"));
								row8.ErrorStatus = ((String) globalMap.get("ErrorStatus"));
								row8.NULL = ((String) globalMap.get("NULL"));

								nb_line_tJavaRow_2++;

								tos_count_tJavaRow_2++;

								/**
								 * [tJavaRow_2 main ] stop
								 */

								/**
								 * [tJavaRow_2 process_data_begin ] start
								 */

								currentComponent = "tJavaRow_2";

								/**
								 * [tJavaRow_2 process_data_begin ] stop
								 */

								/**
								 * [tDBSP_2 main ] start
								 */

								currentComponent = "tDBSP_2";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row8");
								}

								if (row8.Update == null) {
									statement_tDBSP_2.setNull(1, java.sql.Types.VARCHAR);
								} else {

									statement_tDBSP_2.setString(1, row8.Update);

								}

								if (row8.CallID == null) {
									statement_tDBSP_2.setNull(2, java.sql.Types.VARCHAR);
								} else {

									statement_tDBSP_2.setString(2, row8.CallID);

								}

								statement_tDBSP_2.registerOutParameter(2, java.sql.Types.VARCHAR);

								if (row8.NULL == null) {
									statement_tDBSP_2.setNull(3, java.sql.Types.VARCHAR);
								} else {

									statement_tDBSP_2.setString(3, row8.NULL);

								}

								if (row8.NULLDate == null) {
									statement_tDBSP_2.setNull(4, java.sql.Types.DATE);
								} else {

									statement_tDBSP_2.setTimestamp(4, new java.sql.Timestamp(row8.NULLDate.getTime()));

								}

								if (row8.NULLDate == null) {
									statement_tDBSP_2.setNull(5, java.sql.Types.DATE);
								} else {

									statement_tDBSP_2.setTimestamp(5, new java.sql.Timestamp(row8.NULLDate.getTime()));

								}

								if (row8.ErrorStatus == null) {
									statement_tDBSP_2.setNull(6, java.sql.Types.VARCHAR);
								} else {

									statement_tDBSP_2.setString(6, row8.ErrorStatus);

								}

								if (row8.NULL == null) {
									statement_tDBSP_2.setNull(7, java.sql.Types.VARCHAR);
								} else {

									statement_tDBSP_2.setString(7, row8.NULL);

								}

								if (row8.errorMessage == null) {
									statement_tDBSP_2.setNull(8, java.sql.Types.VARCHAR);
								} else {

									statement_tDBSP_2.setString(8, row8.errorMessage);

								}

								if (row8.NULL == null) {
									statement_tDBSP_2.setNull(9, java.sql.Types.VARCHAR);
								} else {

									statement_tDBSP_2.setString(9, row8.NULL);

								}

								statement_tDBSP_2.registerOutParameter(10, java.sql.Types.VARCHAR);

								statement_tDBSP_2.registerOutParameter(11, java.sql.Types.VARCHAR);

								statement_tDBSP_2.execute();

								row13.errorCode = row8.errorCode;

								row13.errorMessage = row8.errorMessage;

								row13.CallID = statement_tDBSP_2.getString(2);

								if (statement_tDBSP_2.wasNull()) {
									row13.CallID = null;
								}

								row13.Update = row8.Update;

								row13.ErrorStatus = row8.ErrorStatus;

								row13.NULL = row8.NULL;

								row13.NULLDate = row8.NULLDate;

								row13.ErrorCodeSPOUT = statement_tDBSP_2.getString(10);

								if (statement_tDBSP_2.wasNull()) {
									row13.ErrorCodeSPOUT = null;
								}

								row13.ErrorMsgSPOUT = statement_tDBSP_2.getString(11);

								if (statement_tDBSP_2.wasNull()) {
									row13.ErrorMsgSPOUT = null;
								}

								tos_count_tDBSP_2++;

								/**
								 * [tDBSP_2 main ] stop
								 */

								/**
								 * [tDBSP_2 process_data_begin ] start
								 */

								currentComponent = "tDBSP_2";

								/**
								 * [tDBSP_2 process_data_begin ] stop
								 */

								/**
								 * [tLogRow_3 main ] start
								 */

								currentComponent = "tLogRow_3";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row13");
								}

///////////////////////		

								strBuffer_tLogRow_3 = new StringBuilder();

								if (row13.errorCode != null) { //

									strBuffer_tLogRow_3.append(String.valueOf(row13.errorCode));

								} //

								strBuffer_tLogRow_3.append("|");

								if (row13.errorMessage != null) { //

									strBuffer_tLogRow_3.append(String.valueOf(row13.errorMessage));

								} //

								strBuffer_tLogRow_3.append("|");

								if (row13.CallID != null) { //

									strBuffer_tLogRow_3.append(String.valueOf(row13.CallID));

								} //

								strBuffer_tLogRow_3.append("|");

								if (row13.Update != null) { //

									strBuffer_tLogRow_3.append(String.valueOf(row13.Update));

								} //

								strBuffer_tLogRow_3.append("|");

								if (row13.ErrorStatus != null) { //

									strBuffer_tLogRow_3.append(String.valueOf(row13.ErrorStatus));

								} //

								strBuffer_tLogRow_3.append("|");

								if (row13.NULL != null) { //

									strBuffer_tLogRow_3.append(String.valueOf(row13.NULL));

								} //

								strBuffer_tLogRow_3.append("|");

								if (row13.NULLDate != null) { //

									strBuffer_tLogRow_3
											.append(FormatterUtils.format_Date(row13.NULLDate, "dd-MM-yyyy"));

								} //

								strBuffer_tLogRow_3.append("|");

								if (row13.ErrorCodeSPOUT != null) { //

									strBuffer_tLogRow_3.append(String.valueOf(row13.ErrorCodeSPOUT));

								} //

								strBuffer_tLogRow_3.append("|");

								if (row13.ErrorMsgSPOUT != null) { //

									strBuffer_tLogRow_3.append(String.valueOf(row13.ErrorMsgSPOUT));

								} //

								if (globalMap.get("tLogRow_CONSOLE") != null) {
									consoleOut_tLogRow_3 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
								} else {
									consoleOut_tLogRow_3 = new java.io.PrintStream(
											new java.io.BufferedOutputStream(System.out));
									globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_3);
								}
								consoleOut_tLogRow_3.println(strBuffer_tLogRow_3.toString());
								consoleOut_tLogRow_3.flush();
								nb_line_tLogRow_3++;
//////

//////                    

///////////////////////    			

								tos_count_tLogRow_3++;

								/**
								 * [tLogRow_3 main ] stop
								 */

								/**
								 * [tLogRow_3 process_data_begin ] start
								 */

								currentComponent = "tLogRow_3";

								/**
								 * [tLogRow_3 process_data_begin ] stop
								 */

								/**
								 * [tLogRow_3 process_data_end ] start
								 */

								currentComponent = "tLogRow_3";

								/**
								 * [tLogRow_3 process_data_end ] stop
								 */

								/**
								 * [tDBSP_2 process_data_end ] start
								 */

								currentComponent = "tDBSP_2";

								/**
								 * [tDBSP_2 process_data_end ] stop
								 */

								/**
								 * [tJavaRow_2 process_data_end ] start
								 */

								currentComponent = "tJavaRow_2";

								/**
								 * [tJavaRow_2 process_data_end ] stop
								 */

							} // End of branch "row7"

							/**
							 * [tRESTClient_2 process_data_end ] start
							 */

							currentComponent = "tRESTClient_2";

							/**
							 * [tRESTClient_2 process_data_end ] stop
							 */

							/**
							 * [tJavaRow_1 process_data_end ] start
							 */

							currentComponent = "tJavaRow_1";

							/**
							 * [tJavaRow_1 process_data_end ] stop
							 */

							/**
							 * [tDBSP_1 process_data_end ] start
							 */

							currentComponent = "tDBSP_1";

							/**
							 * [tDBSP_1 process_data_end ] stop
							 */

							/**
							 * [tSetGlobalVar_1 process_data_end ] start
							 */

							currentComponent = "tSetGlobalVar_1";

							/**
							 * [tSetGlobalVar_1 process_data_end ] stop
							 */

						} // End of branch "SetVars"

						/**
						 * [tMap_1 process_data_end ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
					if (conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {

						conn_tDBInput_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tSetGlobalVar_1 end ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "SetVars");
				}

				ok_Hash.put("tSetGlobalVar_1", true);
				end_Hash.put("tSetGlobalVar_1", System.currentTimeMillis());

				/**
				 * [tSetGlobalVar_1 end ] stop
				 */

				/**
				 * [tDBSP_1 end ] start
				 */

				currentComponent = "tDBSP_1";

				statement_tDBSP_1.close();

				connection_tDBSP_1.close();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tDBSP_1", true);
				end_Hash.put("tDBSP_1", System.currentTimeMillis());

				/**
				 * [tDBSP_1 end ] stop
				 */

				/**
				 * [tJavaRow_1 end ] start
				 */

				currentComponent = "tJavaRow_1";

				globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tJavaRow_1", true);
				end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				/**
				 * [tJavaRow_1 end ] stop
				 */

				/**
				 * [tRESTClient_2 end ] start
				 */

				currentComponent = "tRESTClient_2";

				if (globalMap.get("tRESTClient_2_NB_LINE") == null) {
					globalMap.put("tRESTClient_2_NB_LINE", 1);
				}

// [tRESTCliend_end]
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tRESTClient_2", true);
				end_Hash.put("tRESTClient_2", System.currentTimeMillis());

				/**
				 * [tRESTClient_2 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tFlowToIterate_1 end ] start
				 */

				currentComponent = "tFlowToIterate_1";

				globalMap.put("tFlowToIterate_1_NB_LINE", nb_line_tFlowToIterate_1);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "output");
				}

				ok_Hash.put("tFlowToIterate_1", true);
				end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_1 end ] stop
				 */

				/**
				 * [tJavaRow_2 end ] start
				 */

				currentComponent = "tJavaRow_2";

				globalMap.put("tJavaRow_2_NB_LINE", nb_line_tJavaRow_2);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row7");
				}

				ok_Hash.put("tJavaRow_2", true);
				end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				/**
				 * [tJavaRow_2 end ] stop
				 */

				/**
				 * [tDBSP_2 end ] start
				 */

				currentComponent = "tDBSP_2";

				statement_tDBSP_2.close();

				connection_tDBSP_2.close();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row8");
				}

				ok_Hash.put("tDBSP_2", true);
				end_Hash.put("tDBSP_2", System.currentTimeMillis());

				/**
				 * [tDBSP_2 end ] stop
				 */

				/**
				 * [tLogRow_3 end ] start
				 */

				currentComponent = "tLogRow_3";

//////
//////
				globalMap.put("tLogRow_3_NB_LINE", nb_line_tLogRow_3);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row13");
				}

				ok_Hash.put("tLogRow_3", true);
				end_Hash.put("tLogRow_3", System.currentTimeMillis());

				/**
				 * [tLogRow_3 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tSetGlobalVar_1 finally ] start
				 */

				currentComponent = "tSetGlobalVar_1";

				/**
				 * [tSetGlobalVar_1 finally ] stop
				 */

				/**
				 * [tDBSP_1 finally ] start
				 */

				currentComponent = "tDBSP_1";

				/**
				 * [tDBSP_1 finally ] stop
				 */

				/**
				 * [tJavaRow_1 finally ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 finally ] stop
				 */

				/**
				 * [tRESTClient_2 finally ] start
				 */

				currentComponent = "tRESTClient_2";

				/**
				 * [tRESTClient_2 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tFlowToIterate_1 finally ] start
				 */

				currentComponent = "tFlowToIterate_1";

				/**
				 * [tFlowToIterate_1 finally ] stop
				 */

				/**
				 * [tJavaFlex_1 finally ] start
				 */

				currentComponent = "tJavaFlex_1";

				/**
				 * [tJavaFlex_1 finally ] stop
				 */

				/**
				 * [tFileOutputRaw_1 finally ] start
				 */

				currentComponent = "tFileOutputRaw_1";

				/**
				 * [tFileOutputRaw_1 finally ] stop
				 */

				/**
				 * [tJavaRow_2 finally ] start
				 */

				currentComponent = "tJavaRow_2";

				/**
				 * [tJavaRow_2 finally ] stop
				 */

				/**
				 * [tDBSP_2 finally ] start
				 */

				currentComponent = "tDBSP_2";

				/**
				 * [tDBSP_2 finally ] stop
				 */

				/**
				 * [tLogRow_3 finally ] start
				 */

				currentComponent = "tLogRow_3";

				/**
				 * [tLogRow_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_SPACEWEATHER_SWAPICallCME = new byte[0];
		static byte[] commonByteArray_SPACEWEATHER_SWAPICallCME = new byte[0];

		public String Update;

		public String getUpdate() {
			return this.Update;
		}

		public String FinishedStatus;

		public String getFinishedStatus() {
			return this.FinishedStatus;
		}

		public String CallID;

		public String getCallID() {
			return this.CallID;
		}

		public String NULL;

		public String getNULL() {
			return this.NULL;
		}

		public String ErrorCodeSPOUT;

		public String getErrorCodeSPOUT() {
			return this.ErrorCodeSPOUT;
		}

		public String ErrorMsgSPOut;

		public String getErrorMsgSPOut() {
			return this.ErrorMsgSPOut;
		}

		public java.util.Date NULLDATE;

		public java.util.Date getNULLDATE() {
			return this.NULLDATE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SPACEWEATHER_SWAPICallCME.length) {
					if (length < 1024 && commonByteArray_SPACEWEATHER_SWAPICallCME.length == 0) {
						commonByteArray_SPACEWEATHER_SWAPICallCME = new byte[1024];
					} else {
						commonByteArray_SPACEWEATHER_SWAPICallCME = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SPACEWEATHER_SWAPICallCME, 0, length);
				strReturn = new String(commonByteArray_SPACEWEATHER_SWAPICallCME, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SPACEWEATHER_SWAPICallCME) {

				try {

					int length = 0;

					this.Update = readString(dis);

					this.FinishedStatus = readString(dis);

					this.CallID = readString(dis);

					this.NULL = readString(dis);

					this.ErrorCodeSPOUT = readString(dis);

					this.ErrorMsgSPOut = readString(dis);

					this.NULLDATE = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Update, dos);

				// String

				writeString(this.FinishedStatus, dos);

				// String

				writeString(this.CallID, dos);

				// String

				writeString(this.NULL, dos);

				// String

				writeString(this.ErrorCodeSPOUT, dos);

				// String

				writeString(this.ErrorMsgSPOut, dos);

				// java.util.Date

				writeDate(this.NULLDATE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Update=" + Update);
			sb.append(",FinishedStatus=" + FinishedStatus);
			sb.append(",CallID=" + CallID);
			sb.append(",NULL=" + NULL);
			sb.append(",ErrorCodeSPOUT=" + ErrorCodeSPOUT);
			sb.append(",ErrorMsgSPOut=" + ErrorMsgSPOut);
			sb.append(",NULLDATE=" + String.valueOf(NULLDATE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_SPACEWEATHER_SWAPICallCME = new byte[0];
		static byte[] commonByteArray_SPACEWEATHER_SWAPICallCME = new byte[0];

		public String Update;

		public String getUpdate() {
			return this.Update;
		}

		public String FinishedStatus;

		public String getFinishedStatus() {
			return this.FinishedStatus;
		}

		public String CallID;

		public String getCallID() {
			return this.CallID;
		}

		public String NULL;

		public String getNULL() {
			return this.NULL;
		}

		public String ErrorCodeSPOUT;

		public String getErrorCodeSPOUT() {
			return this.ErrorCodeSPOUT;
		}

		public String ErrorMsgSPOut;

		public String getErrorMsgSPOut() {
			return this.ErrorMsgSPOut;
		}

		public java.util.Date NULLDATE;

		public java.util.Date getNULLDATE() {
			return this.NULLDATE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SPACEWEATHER_SWAPICallCME.length) {
					if (length < 1024 && commonByteArray_SPACEWEATHER_SWAPICallCME.length == 0) {
						commonByteArray_SPACEWEATHER_SWAPICallCME = new byte[1024];
					} else {
						commonByteArray_SPACEWEATHER_SWAPICallCME = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SPACEWEATHER_SWAPICallCME, 0, length);
				strReturn = new String(commonByteArray_SPACEWEATHER_SWAPICallCME, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SPACEWEATHER_SWAPICallCME) {

				try {

					int length = 0;

					this.Update = readString(dis);

					this.FinishedStatus = readString(dis);

					this.CallID = readString(dis);

					this.NULL = readString(dis);

					this.ErrorCodeSPOUT = readString(dis);

					this.ErrorMsgSPOut = readString(dis);

					this.NULLDATE = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Update, dos);

				// String

				writeString(this.FinishedStatus, dos);

				// String

				writeString(this.CallID, dos);

				// String

				writeString(this.NULL, dos);

				// String

				writeString(this.ErrorCodeSPOUT, dos);

				// String

				writeString(this.ErrorMsgSPOut, dos);

				// java.util.Date

				writeDate(this.NULLDATE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Update=" + Update);
			sb.append(",FinishedStatus=" + FinishedStatus);
			sb.append(",CallID=" + CallID);
			sb.append(",NULL=" + NULL);
			sb.append(",ErrorCodeSPOUT=" + ErrorCodeSPOUT);
			sb.append(",ErrorMsgSPOut=" + ErrorMsgSPOut);
			sb.append(",NULLDATE=" + String.valueOf(NULLDATE));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJavaFlex_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tJavaFlex_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row9Struct row9 = new row9Struct();
				row10Struct row10 = new row10Struct();

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row10");
				}

				int tos_count_tLogRow_1 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
				java.io.PrintStream consoleOut_tLogRow_1 = null;

				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
///////////////////////    			

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tDBSP_3 begin ] start
				 */

				ok_Hash.put("tDBSP_3", false);
				start_Hash.put("tDBSP_3", System.currentTimeMillis());

				currentComponent = "tDBSP_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row9");
				}

				int tos_count_tDBSP_3 = 0;

				java.sql.Connection connection_tDBSP_3 = null;
				String dbProperties_tDBSP_3 = "noDatetimeStringSync=true";
				String connectionString_tDBSP_3 = null;
				if (dbProperties_tDBSP_3 == null || dbProperties_tDBSP_3.trim().length() == 0) {
					connectionString_tDBSP_3 = "jdbc:mysql://" + "localhost" + ":" + "" + "/" + "NASANW";
				} else {
					connectionString_tDBSP_3 = "jdbc:mysql://" + "localhost" + ":" + "" + "/" + "NASANW" + "?"
							+ dbProperties_tDBSP_3;
				}
				String dbUser_tDBSP_3 = "bdsql";

				final String decryptedPassword_tDBSP_3 = routines.system.PasswordEncryptUtil
						.decryptPassword("ENC:[uT5pLBHlLZCyT74lQ738J4EshCcQsYnejVswGmtG3fZKGJ8=]");

				String dbPwd_tDBSP_3 = decryptedPassword_tDBSP_3;

				java.lang.Class.forName("com.mysql.cj.jdbc.Driver");
				connection_tDBSP_3 = java.sql.DriverManager.getConnection(connectionString_tDBSP_3, dbUser_tDBSP_3,
						dbPwd_tDBSP_3);

				java.sql.CallableStatement statement_tDBSP_3 = connection_tDBSP_3
						.prepareCall("{call " + "nasaAPIcallsHandler" + "(?,?,?,?,?,?,?,?,?,?)}");

				java.sql.Date tmpDate_tDBSP_3;
				String tmpString_tDBSP_3;

				/**
				 * [tDBSP_3 begin ] stop
				 */

				/**
				 * [tJavaFlex_2 begin ] start
				 */

				ok_Hash.put("tJavaFlex_2", false);
				start_Hash.put("tJavaFlex_2", System.currentTimeMillis());

				currentComponent = "tJavaFlex_2";

				int tos_count_tJavaFlex_2 = 0;

// start part of your Java code

				/**
				 * [tJavaFlex_2 begin ] stop
				 */

				/**
				 * [tJavaFlex_2 main ] start
				 */

				currentComponent = "tJavaFlex_2";

// here is the main part of the component,
// a piece of code executed in the row
// loop

				row9.Update = (String) globalMap.get("Update");
				row9.NULL = (String) globalMap.get("NULL");
				row9.CallID = (String) globalMap.get("CallID");
				row9.FinishedStatus = (String) globalMap.get("FinishedStatus");

				tos_count_tJavaFlex_2++;

				/**
				 * [tJavaFlex_2 main ] stop
				 */

				/**
				 * [tJavaFlex_2 process_data_begin ] start
				 */

				currentComponent = "tJavaFlex_2";

				/**
				 * [tJavaFlex_2 process_data_begin ] stop
				 */

				/**
				 * [tDBSP_3 main ] start
				 */

				currentComponent = "tDBSP_3";

				if (execStat) {
					runStat.updateStatOnConnection(iterateId, 1, 1, "row9");
				}

				if (row9.Update == null) {
					statement_tDBSP_3.setNull(1, java.sql.Types.VARCHAR);
				} else {

					statement_tDBSP_3.setString(1, row9.Update);

				}

				if (row9.CallID == null) {
					statement_tDBSP_3.setNull(2, java.sql.Types.VARCHAR);
				} else {

					statement_tDBSP_3.setString(2, row9.CallID);

				}

				statement_tDBSP_3.registerOutParameter(2, java.sql.Types.VARCHAR);

				if (row9.NULL == null) {
					statement_tDBSP_3.setNull(3, java.sql.Types.VARCHAR);
				} else {

					statement_tDBSP_3.setString(3, row9.NULL);

				}

				if (row9.NULLDATE == null) {
					statement_tDBSP_3.setNull(4, java.sql.Types.DATE);
				} else {

					statement_tDBSP_3.setTimestamp(4, new java.sql.Timestamp(row9.NULLDATE.getTime()));

				}

				if (row9.NULLDATE == null) {
					statement_tDBSP_3.setNull(5, java.sql.Types.DATE);
				} else {

					statement_tDBSP_3.setTimestamp(5, new java.sql.Timestamp(row9.NULLDATE.getTime()));

				}

				if (row9.FinishedStatus == null) {
					statement_tDBSP_3.setNull(6, java.sql.Types.VARCHAR);
				} else {

					statement_tDBSP_3.setString(6, row9.FinishedStatus);

				}

				if (row9.NULL == null) {
					statement_tDBSP_3.setNull(7, java.sql.Types.VARCHAR);
				} else {

					statement_tDBSP_3.setString(7, row9.NULL);

				}

				if (row9.NULL == null) {
					statement_tDBSP_3.setNull(8, java.sql.Types.VARCHAR);
				} else {

					statement_tDBSP_3.setString(8, row9.NULL);

				}

				statement_tDBSP_3.registerOutParameter(9, java.sql.Types.VARCHAR);

				statement_tDBSP_3.registerOutParameter(10, java.sql.Types.VARCHAR);

				statement_tDBSP_3.execute();

				row10.Update = row9.Update;

				row10.FinishedStatus = row9.FinishedStatus;

				row10.CallID = statement_tDBSP_3.getString(2);

				if (statement_tDBSP_3.wasNull()) {
					row10.CallID = null;
				}

				row10.NULL = row9.NULL;

				row10.ErrorCodeSPOUT = statement_tDBSP_3.getString(9);

				if (statement_tDBSP_3.wasNull()) {
					row10.ErrorCodeSPOUT = null;
				}

				row10.ErrorMsgSPOut = statement_tDBSP_3.getString(10);

				if (statement_tDBSP_3.wasNull()) {
					row10.ErrorMsgSPOut = null;
				}

				row10.NULLDATE = row9.NULLDATE;

				tos_count_tDBSP_3++;

				/**
				 * [tDBSP_3 main ] stop
				 */

				/**
				 * [tDBSP_3 process_data_begin ] start
				 */

				currentComponent = "tDBSP_3";

				/**
				 * [tDBSP_3 process_data_begin ] stop
				 */

				/**
				 * [tLogRow_1 main ] start
				 */

				currentComponent = "tLogRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(iterateId, 1, 1, "row10");
				}

///////////////////////		

				strBuffer_tLogRow_1 = new StringBuilder();

				if (row10.Update != null) { //

					strBuffer_tLogRow_1.append(String.valueOf(row10.Update));

				} //

				strBuffer_tLogRow_1.append("|");

				if (row10.FinishedStatus != null) { //

					strBuffer_tLogRow_1.append(String.valueOf(row10.FinishedStatus));

				} //

				strBuffer_tLogRow_1.append("|");

				if (row10.CallID != null) { //

					strBuffer_tLogRow_1.append(String.valueOf(row10.CallID));

				} //

				strBuffer_tLogRow_1.append("|");

				if (row10.NULL != null) { //

					strBuffer_tLogRow_1.append(String.valueOf(row10.NULL));

				} //

				strBuffer_tLogRow_1.append("|");

				if (row10.ErrorCodeSPOUT != null) { //

					strBuffer_tLogRow_1.append(String.valueOf(row10.ErrorCodeSPOUT));

				} //

				strBuffer_tLogRow_1.append("|");

				if (row10.ErrorMsgSPOut != null) { //

					strBuffer_tLogRow_1.append(String.valueOf(row10.ErrorMsgSPOut));

				} //

				strBuffer_tLogRow_1.append("|");

				if (row10.NULLDATE != null) { //

					strBuffer_tLogRow_1.append(FormatterUtils.format_Date(row10.NULLDATE, "dd-MM-yyyy"));

				} //

				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
				}
				consoleOut_tLogRow_1.println(strBuffer_tLogRow_1.toString());
				consoleOut_tLogRow_1.flush();
				nb_line_tLogRow_1++;
//////

//////                    

///////////////////////    			

				tos_count_tLogRow_1++;

				/**
				 * [tLogRow_1 main ] stop
				 */

				/**
				 * [tLogRow_1 process_data_begin ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 process_data_begin ] stop
				 */

				/**
				 * [tLogRow_1 process_data_end ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 process_data_end ] stop
				 */

				/**
				 * [tDBSP_3 process_data_end ] start
				 */

				currentComponent = "tDBSP_3";

				/**
				 * [tDBSP_3 process_data_end ] stop
				 */

				/**
				 * [tJavaFlex_2 process_data_end ] start
				 */

				currentComponent = "tJavaFlex_2";

				/**
				 * [tJavaFlex_2 process_data_end ] stop
				 */

				/**
				 * [tJavaFlex_2 end ] start
				 */

				currentComponent = "tJavaFlex_2";

// end of the component, outside/closing the loop

				ok_Hash.put("tJavaFlex_2", true);
				end_Hash.put("tJavaFlex_2", System.currentTimeMillis());

				/**
				 * [tJavaFlex_2 end ] stop
				 */

				/**
				 * [tDBSP_3 end ] start
				 */

				currentComponent = "tDBSP_3";

				statement_tDBSP_3.close();

				connection_tDBSP_3.close();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row9");
				}

				ok_Hash.put("tDBSP_3", true);
				end_Hash.put("tDBSP_3", System.currentTimeMillis());

				/**
				 * [tDBSP_3 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

//////
//////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row10");
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tJavaFlex_2 finally ] start
				 */

				currentComponent = "tJavaFlex_2";

				/**
				 * [tJavaFlex_2 finally ] stop
				 */

				/**
				 * [tDBSP_3 finally ] start
				 */

				currentComponent = "tDBSP_3";

				/**
				 * [tDBSP_3 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJavaFlex_2_SUBPROCESS_STATE", 1);
	}

	public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_SPACEWEATHER_SWAPICallCME = new byte[0];
		static byte[] commonByteArray_SPACEWEATHER_SWAPICallCME = new byte[0];

		public String Update;

		public String getUpdate() {
			return this.Update;
		}

		public String CallID;

		public String getCallID() {
			return this.CallID;
		}

		public String NULL;

		public String getNULL() {
			return this.NULL;
		}

		public String ErrorCodeSPOUT;

		public String getErrorCodeSPOUT() {
			return this.ErrorCodeSPOUT;
		}

		public String ErrorMsgSPOut;

		public String getErrorMsgSPOut() {
			return this.ErrorMsgSPOut;
		}

		public java.util.Date NULLDATE;

		public java.util.Date getNULLDATE() {
			return this.NULLDATE;
		}

		public String ErrorStatus;

		public String getErrorStatus() {
			return this.ErrorStatus;
		}

		public String Message;

		public String getMessage() {
			return this.Message;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SPACEWEATHER_SWAPICallCME.length) {
					if (length < 1024 && commonByteArray_SPACEWEATHER_SWAPICallCME.length == 0) {
						commonByteArray_SPACEWEATHER_SWAPICallCME = new byte[1024];
					} else {
						commonByteArray_SPACEWEATHER_SWAPICallCME = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SPACEWEATHER_SWAPICallCME, 0, length);
				strReturn = new String(commonByteArray_SPACEWEATHER_SWAPICallCME, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SPACEWEATHER_SWAPICallCME) {

				try {

					int length = 0;

					this.Update = readString(dis);

					this.CallID = readString(dis);

					this.NULL = readString(dis);

					this.ErrorCodeSPOUT = readString(dis);

					this.ErrorMsgSPOut = readString(dis);

					this.NULLDATE = readDate(dis);

					this.ErrorStatus = readString(dis);

					this.Message = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Update, dos);

				// String

				writeString(this.CallID, dos);

				// String

				writeString(this.NULL, dos);

				// String

				writeString(this.ErrorCodeSPOUT, dos);

				// String

				writeString(this.ErrorMsgSPOut, dos);

				// java.util.Date

				writeDate(this.NULLDATE, dos);

				// String

				writeString(this.ErrorStatus, dos);

				// String

				writeString(this.Message, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Update=" + Update);
			sb.append(",CallID=" + CallID);
			sb.append(",NULL=" + NULL);
			sb.append(",ErrorCodeSPOUT=" + ErrorCodeSPOUT);
			sb.append(",ErrorMsgSPOut=" + ErrorMsgSPOut);
			sb.append(",NULLDATE=" + String.valueOf(NULLDATE));
			sb.append(",ErrorStatus=" + ErrorStatus);
			sb.append(",Message=" + Message);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_SPACEWEATHER_SWAPICallCME = new byte[0];
		static byte[] commonByteArray_SPACEWEATHER_SWAPICallCME = new byte[0];

		public String Update;

		public String getUpdate() {
			return this.Update;
		}

		public String CallID;

		public String getCallID() {
			return this.CallID;
		}

		public String ErrorStatus;

		public String getErrorStatus() {
			return this.ErrorStatus;
		}

		public String NULL;

		public String getNULL() {
			return this.NULL;
		}

		public String ErrorCodeSPOUT;

		public String getErrorCodeSPOUT() {
			return this.ErrorCodeSPOUT;
		}

		public String ErrorMsgSPOut;

		public String getErrorMsgSPOut() {
			return this.ErrorMsgSPOut;
		}

		public java.util.Date NULLDATE;

		public java.util.Date getNULLDATE() {
			return this.NULLDATE;
		}

		public String Message;

		public String getMessage() {
			return this.Message;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_SPACEWEATHER_SWAPICallCME.length) {
					if (length < 1024 && commonByteArray_SPACEWEATHER_SWAPICallCME.length == 0) {
						commonByteArray_SPACEWEATHER_SWAPICallCME = new byte[1024];
					} else {
						commonByteArray_SPACEWEATHER_SWAPICallCME = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_SPACEWEATHER_SWAPICallCME, 0, length);
				strReturn = new String(commonByteArray_SPACEWEATHER_SWAPICallCME, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_SPACEWEATHER_SWAPICallCME) {

				try {

					int length = 0;

					this.Update = readString(dis);

					this.CallID = readString(dis);

					this.ErrorStatus = readString(dis);

					this.NULL = readString(dis);

					this.ErrorCodeSPOUT = readString(dis);

					this.ErrorMsgSPOut = readString(dis);

					this.NULLDATE = readDate(dis);

					this.Message = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Update, dos);

				// String

				writeString(this.CallID, dos);

				// String

				writeString(this.ErrorStatus, dos);

				// String

				writeString(this.NULL, dos);

				// String

				writeString(this.ErrorCodeSPOUT, dos);

				// String

				writeString(this.ErrorMsgSPOut, dos);

				// java.util.Date

				writeDate(this.NULLDATE, dos);

				// String

				writeString(this.Message, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Update=" + Update);
			sb.append(",CallID=" + CallID);
			sb.append(",ErrorStatus=" + ErrorStatus);
			sb.append(",NULL=" + NULL);
			sb.append(",ErrorCodeSPOUT=" + ErrorCodeSPOUT);
			sb.append(",ErrorMsgSPOut=" + ErrorMsgSPOut);
			sb.append(",NULLDATE=" + String.valueOf(NULLDATE));
			sb.append(",Message=" + Message);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tJavaFlex_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tJavaFlex_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row11Struct row11 = new row11Struct();
				row12Struct row12 = new row12Struct();

				/**
				 * [tLogRow_2 begin ] start
				 */

				ok_Hash.put("tLogRow_2", false);
				start_Hash.put("tLogRow_2", System.currentTimeMillis());

				currentComponent = "tLogRow_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row12");
				}

				int tos_count_tLogRow_2 = 0;

				///////////////////////

				final String OUTPUT_FIELD_SEPARATOR_tLogRow_2 = "|";
				java.io.PrintStream consoleOut_tLogRow_2 = null;

				StringBuilder strBuffer_tLogRow_2 = null;
				int nb_line_tLogRow_2 = 0;
///////////////////////    			

				/**
				 * [tLogRow_2 begin ] stop
				 */

				/**
				 * [tDBSP_4 begin ] start
				 */

				ok_Hash.put("tDBSP_4", false);
				start_Hash.put("tDBSP_4", System.currentTimeMillis());

				currentComponent = "tDBSP_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row11");
				}

				int tos_count_tDBSP_4 = 0;

				java.sql.Connection connection_tDBSP_4 = null;
				String dbProperties_tDBSP_4 = "noDatetimeStringSync=true";
				String connectionString_tDBSP_4 = null;
				if (dbProperties_tDBSP_4 == null || dbProperties_tDBSP_4.trim().length() == 0) {
					connectionString_tDBSP_4 = "jdbc:mysql://" + "localhost" + ":" + "" + "/" + "NASANW";
				} else {
					connectionString_tDBSP_4 = "jdbc:mysql://" + "localhost" + ":" + "" + "/" + "NASANW" + "?"
							+ dbProperties_tDBSP_4;
				}
				String dbUser_tDBSP_4 = "bdsql";

				final String decryptedPassword_tDBSP_4 = routines.system.PasswordEncryptUtil
						.decryptPassword("ENC:[d2usPv+p2ntBKtR7wMhmmUwUMvqmkrosCmiIcTfNuFHbQPs=]");

				String dbPwd_tDBSP_4 = decryptedPassword_tDBSP_4;

				java.lang.Class.forName("com.mysql.cj.jdbc.Driver");
				connection_tDBSP_4 = java.sql.DriverManager.getConnection(connectionString_tDBSP_4, dbUser_tDBSP_4,
						dbPwd_tDBSP_4);

				java.sql.CallableStatement statement_tDBSP_4 = connection_tDBSP_4
						.prepareCall("{call " + "nasaAPIcallsHandler" + "(?,?,?,?,?,?,?,?,?,?)}");

				java.sql.Date tmpDate_tDBSP_4;
				String tmpString_tDBSP_4;

				/**
				 * [tDBSP_4 begin ] stop
				 */

				/**
				 * [tJavaFlex_3 begin ] start
				 */

				ok_Hash.put("tJavaFlex_3", false);
				start_Hash.put("tJavaFlex_3", System.currentTimeMillis());

				currentComponent = "tJavaFlex_3";

				int tos_count_tJavaFlex_3 = 0;

// start part of your Java code

				/**
				 * [tJavaFlex_3 begin ] stop
				 */

				/**
				 * [tJavaFlex_3 main ] start
				 */

				currentComponent = "tJavaFlex_3";

// here is the main part of the component,
// a piece of code executed in the row
// loop

				row11.Update = (String) globalMap.get("Update");
				row11.NULL = (String) globalMap.get("NULL");
				row11.CallID = (String) globalMap.get("CallID");
				row11.ErrorStatus = (String) globalMap.get("ErrorStatus");
				row11.Message = "Error Generating API Response File";

				tos_count_tJavaFlex_3++;

				/**
				 * [tJavaFlex_3 main ] stop
				 */

				/**
				 * [tJavaFlex_3 process_data_begin ] start
				 */

				currentComponent = "tJavaFlex_3";

				/**
				 * [tJavaFlex_3 process_data_begin ] stop
				 */

				/**
				 * [tDBSP_4 main ] start
				 */

				currentComponent = "tDBSP_4";

				if (execStat) {
					runStat.updateStatOnConnection(iterateId, 1, 1, "row11");
				}

				if (row11.Update == null) {
					statement_tDBSP_4.setNull(1, java.sql.Types.VARCHAR);
				} else {

					statement_tDBSP_4.setString(1, row11.Update);

				}

				if (row11.CallID == null) {
					statement_tDBSP_4.setNull(2, java.sql.Types.VARCHAR);
				} else {

					statement_tDBSP_4.setString(2, row11.CallID);

				}

				statement_tDBSP_4.registerOutParameter(2, java.sql.Types.VARCHAR);

				if (row11.NULL == null) {
					statement_tDBSP_4.setNull(3, java.sql.Types.VARCHAR);
				} else {

					statement_tDBSP_4.setString(3, row11.NULL);

				}

				if (row11.NULLDATE == null) {
					statement_tDBSP_4.setNull(4, java.sql.Types.DATE);
				} else {

					statement_tDBSP_4.setTimestamp(4, new java.sql.Timestamp(row11.NULLDATE.getTime()));

				}

				if (row11.NULLDATE == null) {
					statement_tDBSP_4.setNull(5, java.sql.Types.DATE);
				} else {

					statement_tDBSP_4.setTimestamp(5, new java.sql.Timestamp(row11.NULLDATE.getTime()));

				}

				if (row11.ErrorStatus == null) {
					statement_tDBSP_4.setNull(6, java.sql.Types.VARCHAR);
				} else {

					statement_tDBSP_4.setString(6, row11.ErrorStatus);

				}

				if (row11.NULL == null) {
					statement_tDBSP_4.setNull(7, java.sql.Types.VARCHAR);
				} else {

					statement_tDBSP_4.setString(7, row11.NULL);

				}

				if (row11.Message == null) {
					statement_tDBSP_4.setNull(8, java.sql.Types.VARCHAR);
				} else {

					statement_tDBSP_4.setString(8, row11.Message);

				}

				statement_tDBSP_4.registerOutParameter(9, java.sql.Types.VARCHAR);

				statement_tDBSP_4.registerOutParameter(10, java.sql.Types.VARCHAR);

				statement_tDBSP_4.execute();

				row12.Update = row11.Update;

				row12.CallID = statement_tDBSP_4.getString(2);

				if (statement_tDBSP_4.wasNull()) {
					row12.CallID = null;
				}

				row12.NULL = row11.NULL;

				row12.ErrorCodeSPOUT = statement_tDBSP_4.getString(9);

				if (statement_tDBSP_4.wasNull()) {
					row12.ErrorCodeSPOUT = null;
				}

				row12.ErrorMsgSPOut = statement_tDBSP_4.getString(10);

				if (statement_tDBSP_4.wasNull()) {
					row12.ErrorMsgSPOut = null;
				}

				row12.NULLDATE = row11.NULLDATE;

				row12.ErrorStatus = row11.ErrorStatus;

				row12.Message = row11.Message;

				tos_count_tDBSP_4++;

				/**
				 * [tDBSP_4 main ] stop
				 */

				/**
				 * [tDBSP_4 process_data_begin ] start
				 */

				currentComponent = "tDBSP_4";

				/**
				 * [tDBSP_4 process_data_begin ] stop
				 */

				/**
				 * [tLogRow_2 main ] start
				 */

				currentComponent = "tLogRow_2";

				if (execStat) {
					runStat.updateStatOnConnection(iterateId, 1, 1, "row12");
				}

///////////////////////		

				strBuffer_tLogRow_2 = new StringBuilder();

				if (row12.Update != null) { //

					strBuffer_tLogRow_2.append(String.valueOf(row12.Update));

				} //

				strBuffer_tLogRow_2.append("|");

				if (row12.CallID != null) { //

					strBuffer_tLogRow_2.append(String.valueOf(row12.CallID));

				} //

				strBuffer_tLogRow_2.append("|");

				if (row12.NULL != null) { //

					strBuffer_tLogRow_2.append(String.valueOf(row12.NULL));

				} //

				strBuffer_tLogRow_2.append("|");

				if (row12.ErrorCodeSPOUT != null) { //

					strBuffer_tLogRow_2.append(String.valueOf(row12.ErrorCodeSPOUT));

				} //

				strBuffer_tLogRow_2.append("|");

				if (row12.ErrorMsgSPOut != null) { //

					strBuffer_tLogRow_2.append(String.valueOf(row12.ErrorMsgSPOut));

				} //

				strBuffer_tLogRow_2.append("|");

				if (row12.NULLDATE != null) { //

					strBuffer_tLogRow_2.append(FormatterUtils.format_Date(row12.NULLDATE, "dd-MM-yyyy"));

				} //

				strBuffer_tLogRow_2.append("|");

				if (row12.ErrorStatus != null) { //

					strBuffer_tLogRow_2.append(String.valueOf(row12.ErrorStatus));

				} //

				strBuffer_tLogRow_2.append("|");

				if (row12.Message != null) { //

					strBuffer_tLogRow_2.append(String.valueOf(row12.Message));

				} //

				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_2);
				}
				consoleOut_tLogRow_2.println(strBuffer_tLogRow_2.toString());
				consoleOut_tLogRow_2.flush();
				nb_line_tLogRow_2++;
//////

//////                    

///////////////////////    			

				tos_count_tLogRow_2++;

				/**
				 * [tLogRow_2 main ] stop
				 */

				/**
				 * [tLogRow_2 process_data_begin ] start
				 */

				currentComponent = "tLogRow_2";

				/**
				 * [tLogRow_2 process_data_begin ] stop
				 */

				/**
				 * [tLogRow_2 process_data_end ] start
				 */

				currentComponent = "tLogRow_2";

				/**
				 * [tLogRow_2 process_data_end ] stop
				 */

				/**
				 * [tDBSP_4 process_data_end ] start
				 */

				currentComponent = "tDBSP_4";

				/**
				 * [tDBSP_4 process_data_end ] stop
				 */

				/**
				 * [tJavaFlex_3 process_data_end ] start
				 */

				currentComponent = "tJavaFlex_3";

				/**
				 * [tJavaFlex_3 process_data_end ] stop
				 */

				/**
				 * [tJavaFlex_3 end ] start
				 */

				currentComponent = "tJavaFlex_3";

// end of the component, outside/closing the loop

				ok_Hash.put("tJavaFlex_3", true);
				end_Hash.put("tJavaFlex_3", System.currentTimeMillis());

				/**
				 * [tJavaFlex_3 end ] stop
				 */

				/**
				 * [tDBSP_4 end ] start
				 */

				currentComponent = "tDBSP_4";

				statement_tDBSP_4.close();

				connection_tDBSP_4.close();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row11");
				}

				ok_Hash.put("tDBSP_4", true);
				end_Hash.put("tDBSP_4", System.currentTimeMillis());

				/**
				 * [tDBSP_4 end ] stop
				 */

				/**
				 * [tLogRow_2 end ] start
				 */

				currentComponent = "tLogRow_2";

//////
//////
				globalMap.put("tLogRow_2_NB_LINE", nb_line_tLogRow_2);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row12");
				}

				ok_Hash.put("tLogRow_2", true);
				end_Hash.put("tLogRow_2", System.currentTimeMillis());

				/**
				 * [tLogRow_2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tJavaFlex_3 finally ] start
				 */

				currentComponent = "tJavaFlex_3";

				/**
				 * [tJavaFlex_3 finally ] stop
				 */

				/**
				 * [tDBSP_4 finally ] start
				 */

				currentComponent = "tDBSP_4";

				/**
				 * [tDBSP_4 finally ] stop
				 */

				/**
				 * [tLogRow_2 finally ] start
				 */

				currentComponent = "tLogRow_2";

				/**
				 * [tLogRow_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJavaFlex_3_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final SWAPICallCME SWAPICallCMEClass = new SWAPICallCME();

		int exitCode = SWAPICallCMEClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = SWAPICallCME.class.getClassLoader()
					.getResourceAsStream("spaceweather/swapicallcme_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = SWAPICallCME.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
					context.setContextType("nasa_api_key", "id_String");
					context.nasa_api_key = (String) context.getProperty("nasa_api_key");
					context.setContextType("outputfile", "id_String");
					context.outputfile = (String) context.getProperty("outputfile");
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("nasa_api_key")) {
				context.nasa_api_key = (String) parentContextMap.get("nasa_api_key");
			}
			if (parentContextMap.containsKey("outputfile")) {
				context.outputfile = (String) parentContextMap.get("outputfile");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_1) {
			globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

			e_tDBInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : SWAPICallCME");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 183015 characters generated by Talend Open Studio for Big Data on the 31
 * December 2019 12:20:43 GMT
 ************************************************************************************************/